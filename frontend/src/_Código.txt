│ App.jsx
│ TestConvocatorias.jsx
│ main.jsx
│ main.txt
│ ├───api
│ │ auth.js
│ ├───assets
│ │ react.svg
│ │ ├───images
│ │ │ avatar.jpg
│ ├───components
│ │ DailyOps.jsx
│ │ MonthlyClosing.jsx
│ │ TaxAdministration.jsx
│ │ TaxConfig.jsx
│ │ ├───auth
│ │ │ LoginForm.jsx
│ │ │ ProtectedRoute.jsx
│ │ ├───common
│ │ │ Button.jsx
│ │ │ Input.jsx
│ │ │ PermissionGuard.jsx
│ │ ├───ui
│ │ │ Navbar.jsx
│ │ │ SideBar.jsx
│ │ │ TopNavbar.jsx
│ ├───contexts
│ │ AuthContext.jsx
│ ├───features
│ │ ├───convocatorias
│ │ │ ├───api
│ │ │ │ convocatorias.js
│ │ │ ├───pages
│ │ │ │ ConvocatoriasDashboardPage.jsx
│ │ │ ├───styles
│ │ ├───employees
│ │ │ ├───components
│ │ │ │ DashboardWidget.jsx
│ │ │ │ NotificationBell.jsx
│ │ │ │ PaystubDownloadWidget.jsx
│ │ │ ├───pages
│ │ │ │ DashboardPage.jsx
│ │ │ │ EditProfilePage.jsx
│ │ │ │ LoginPage.jsx
│ │ │ │ PayrollSelfServicePage.jsx
│ │ │ │ SignupPage.jsx
│ │ │ ├───styles
│ │ ├───payroll
│ │ │ ├───api
│ │ │ │ payroll.js
│ │ │ ├───components
│ │ │ │ ├───common
│ │ │ │ │ ConceptAffectationForm.jsx
│ │ │ │ │ ConceptAffectionsFrom.jsx
│ │ │ │ │ DataSummaryCard.jsx
│ │ │ │ │ PayrollCalendar.jsx
│ │ │ │ ├───masters
│ │ │ │ │ EmployeePayrollDetails.jsx
│ │ │ │ │ LegalParametersTable.jsx
│ │ │ │ ├───outputs
│ │ │ │ │ BankExportButton.jsx
│ │ │ │ │ PaystubUploader.jsx
│ │ │ │ │ PlameExportButton.jsx
│ │ │ │ ├───processes
│ │ │ │ │ MonthlyNoveltyEntry.jsx
│ │ │ │ │ PrePayrollReviewTable.jsx
│ │ │ │ ├───reports
│ │ │ │ │ OutputFilesPage.jsx
│ │ │ │ │ PayrollSummaryReportPage.jsx
│ │ │ ├───hooks
│ │ │ │ usePayrollCalculations.js
│ │ │ ├───pages
│ │ │ │ LiquidationProcessPage.jsx
│ │ │ │ MastersConfigPage.jsx
│ │ │ │ PayrollDashboardPage.jsx
│ │ │ │ ReportsPage.jsx
│ │ │ ├───styles
│ │ ├───tax
│ │ │ ├───pages
│ │ │ │ DailyOpsPage.jsx
│ │ │ │ MonthlyClosingPage.jsx
│ │ │ │ TaxConfigPage.jsx
│ ├───hooks
│ │ useAuth.js
│ │ usePermissions.js
│ ├───layouts
│ │ AuthenticatedDashboardLayout.jsx
│ │ DashboardLayout.jsx
│ ├───pages
│ │ NotFoundPage.jsx
│ │ ├───auth
│ │ │ LoginPage.jsx
│ ├───routes
│ │ AppRoutes.jsx
│ │ AuthenticatedAppRoutes.jsx
│ ├───styles

### App.jsx
'''
import React from 'react';
import AuthenticatedAppRoutes from './routes/AuthenticatedAppRoutes';
import './App.css';
import './styles/global.css';

function App() {
  return (
    <div className="App">
      <AuthenticatedAppRoutes />
    </div>
  );
}

export default App;

'''

### TestConvocatorias.jsx
'''
import React from 'react';

const TestConvocatorias = () => {
  console.log('🎯 TestConvocatorias component is rendering');
  
  return (
    <div style={{ 
      padding: '40px', 
      backgroundColor: '#e8f5e8', 
      minHeight: '100vh',
      fontFamily: 'Arial, sans-serif'
    }}>
      <h1 style={{ color: '#2e7d32', marginBottom: '20px' }}>
        🎉 ¡Página de Convocatorias Funcionando!
      </h1>
      <div style={{ 
        backgroundColor: 'white', 
        padding: '20px', 
        borderRadius: '8px',
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
      }}>
        <p><strong>✅ Ruta funcionando:</strong> /convocatorias</p>
        <p><strong>✅ Componente renderizado:</strong> TestConvocatorias</p>
        <p><strong>✅ React funcionando:</strong> Estado OK</p>
      </div>
    </div>
  );
};

export default TestConvocatorias;
'''

### main.jsx
'''
import React from 'react';
import ReactDOM from 'react-dom/client';
import AuthenticatedAppRoutes from './routes/AuthenticatedAppRoutes.jsx';
import './styles/global.css'; // Importa tus estilos globales

console.log('🚀 Aplicación iniciando...');

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <AuthenticatedAppRoutes />
  </React.StrictMode>
);

'''

### main.txt
'''
import os
import re

output_file = "_Código.txt"

def generate_tree(start_path, include_test, include_html):
    """Genera una vista tipo árbol desde start_path"""
    tree_lines = []
    for root, dirs, files in os.walk(start_path):
        # Omitir carpeta 'test' si no se incluye
        if 'test' in dirs and not include_test:
            dirs.remove('test')
        
        # Filtrar archivos según configuración
        files = [f for f in files if f != "main.py"]  # excluir main.py
        if 'resources' in root and not include_html:
            files = [f for f in files if not f.endswith('.html')]
        
        # Ordenar alfabéticamente dirs y files
        dirs.sort()
        files.sort()

        # Calcular la profundidad del directorio
        level = root.replace(start_path, '').count(os.sep)
        indent = '│ ' * level + '├───' if level > 0 else ''
        
        dirname = os.path.basename(root) or os.path.abspath(root)
        if level > 0:
            tree_lines.append(f"{indent}{dirname}")
        
        # Agregar los archivos
        for f in files:
            if not f.endswith(".css"):  # Excluir archivos .css
                sub_indent = '│ ' * (level + 1)
                tree_lines.append(f"{sub_indent}{f}")
    
    return "\n".join(tree_lines)

def limpiar_html(content):
    """Elimina las secciones <style>...</style> de un archivo HTML."""
    # Expresión regular para eliminar bloques <style>...</style> con su contenido
    return re.sub(r'<style.*?>.*?</style>', '', content, flags=re.DOTALL | re.IGNORECASE)

def process_files(start_path, include_test, include_html):
    """Lee todos los archivos (excepto .css y main.py) y devuelve bloques formateados"""
    code_blocks = []
    
    for root, dirs, files in os.walk(start_path):
        # Omitir carpeta 'test' si no se incluye
        if 'test' in dirs and not include_test:
            dirs.remove('test')
        
        # Filtrar archivos según configuración
        files = [f for f in files if f != "main.py"]  # excluir main.py
        if 'resources' in root and not include_html:
            files = [f for f in files if not f.endswith('.html')]

        for file in sorted(files):
            if file.endswith(".css"):
                continue
            
            file_path = os.path.join(root, file)
            relative_path = os.path.relpath(file_path, start_path).replace("\\", "/")
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if file.endswith(".html"):
                        content = limpiar_html(content)
            except Exception as e:
                content = f"// Error al leer el archivo: {e}"
            
            block = f"### {relative_path}\n'''\n{content}\n'''\n"
            code_blocks.append(block)
    
    return "\n".join(code_blocks)

def ask_user_for_inclusion():
    """Pregunta al usuario si desea incluir los archivos en 'test' y los archivos .html de 'resources'"""
    include_test = input("¿Deseas incluir los archivos dentro de la carpeta 'test'? (y/n): ").strip().lower() == 'y'
    include_html = input("¿Deseas incluir los archivos .html dentro de la carpeta 'resources'? (y/n): ").strip().lower() == 'y'
    return include_test, include_html

def main():
    start_path = os.getcwd()
    
    include_test, include_html = ask_user_for_inclusion()
    
    tree_output = generate_tree(start_path, include_test, include_html)
    files_output = process_files(start_path, include_test, include_html)
    
    with open(os.path.join(start_path, output_file), 'w', encoding='utf-8') as f:
        f.write(tree_output + "\n\n" + files_output)
    
    print(f"Archivo '{output_file}' generado correctamente.")

if __name__ == "__main__":
    main()

'''

### api/auth.js
'''

'''

### assets/react.svg
'''
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
'''

### assets/images/avatar.jpg
'''
// Error al leer el archivo: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte
'''

### components/DailyOps.jsx
'''
import React, { useState } from "react";

export default function DailyOps() {
  const [step, setStep] = useState("ventaStart");
  const [error, setError] = useState(false);

  const handleVenta = () => {
    const ok = Math.random() > 0.3;
    if (ok) {
      setStep("ventaOk");
    } else {
      setError(true);
      setStep("ventaError");
    }
  };

  const handleCompra = () => {
    const ok = Math.random() > 0.2;
    if (ok) {
      setStep("compraOk");
    } else {
      setStep("compraError");
    }
  };

  return (
    <div className="p-6 bg-white rounded-xl shadow-lg space-y-4">
      <h2 className="text-xl font-bold text-indigo-600">
        Proceso 2 – Operación diaria: Emisión CPE y Registro Compras
      </h2>

      {step === "ventaStart" && (
        <button
          onClick={handleVenta}
          className="px-4 py-2 bg-indigo-500 text-white rounded-lg"
        >
          Registrar Venta (cliente + ítems)
        </button>
      )}

      {step === "ventaError" && (
        <p className="text-red-600">
          Error de validación → ErrorFacturacion.pdf generado
        </p>
      )}

      {step === "ventaOk" && (
        <div>
          <p className="text-green-600 font-medium">
            CPE generado (CPE_XML + CPE_PDF). Registro de ventas actualizado.
          </p>
          <button
            onClick={handleCompra}
            className="px-4 py-2 mt-2 bg-green-500 text-white rounded-lg"
          >
            Registrar Factura de Proveedor
          </button>
        </div>
      )}

      {step === "compraError" && (
        <p className="text-red-600">
          Validación fallida → IncidenciaCompra.pdf generado
        </p>
      )}

      {step === "compraOk" && (
        <div className="space-y-2">
          <p className="text-green-600 font-medium">
            Compra registrada correctamente.
          </p>
          <ul className="list-disc list-inside text-sm">
            <li>RegistroComprasEntry</li>
            <li>Archivo almacenado</li>
            <li>AuditLogEntry creado</li>
          </ul>
        </div>
      )}
    </div>
  );
}

'''

### components/MonthlyClosing.jsx
'''
import React, { useState } from "react";

export default function MonthlyClosing() {
  const [step, setStep] = useState("trigger");
  const [approved, setApproved] = useState(null);

  const handleCalculo = () => setStep("calculo");
  const handleRevision = (ok) => {
    setApproved(ok);
    setStep(ok ? "approved" : "rejected");
  };

  return (
    <div className="p-6 bg-white rounded-xl shadow-lg space-y-4">
      <h2 className="text-xl font-bold text-indigo-600">
        Proceso 3 – Cierre mensual y declaraciones
      </h2>

      {step === "trigger" && (
        <button
          onClick={handleCalculo}
          className="px-4 py-2 bg-indigo-500 text-white rounded-lg"
        >
          Ejecutar Cierre del Periodo
        </button>
      )}

      {step === "calculo" && (
        <div>
          <p className="text-blue-600">
            Cálculo en proceso → BorradorCalculo.xlsx generado
          </p>
          <p className="text-sm mt-2">
            Archivos listos: Form621.pdf, ResumenIGV.pdf, Libros Excel
          </p>
          <button
            onClick={() => handleRevision(true)}
            className="px-4 py-2 mt-2 bg-green-500 text-white rounded-lg"
          >
            Aprobar Declaración
          </button>
          <button
            onClick={() => handleRevision(false)}
            className="px-4 py-2 mt-2 ml-2 bg-red-500 text-white rounded-lg"
          >
            Rechazar Declaración
          </button>
        </div>
      )}

      {step === "approved" && (
        <div className="space-y-2">
          <p className="text-green-600 font-medium">
            Declaración aprobada. PaqueteDeclaracion_YYYYMM.zip disponible.
          </p>
          <p className="text-sm">
            Calendario actualizado + AuditLogFinal registrado
          </p>
        </div>
      )}

      {step === "rejected" && (
        <p className="text-red-600">
          Declaración rechazada → ListaAjustes creada
        </p>
      )}
    </div>
  );
}

'''

### components/TaxAdministration.jsx
'''
import React, { useState } from "react";
import TaxConfig from "./TaxConfig";
import DailyOps from "./DailyOps";
import MonthlyClosing from "./MonthlyClosing";

const MODULES = {
  CONFIG: "Configuración",
  DAILY: "Operación Diaria",
  MONTHLY: "Cierre Mensual",
};

export default function TaxAdministration() {
  const [active, setActive] = useState(MODULES.CONFIG);

  return (
    <div className="flex min-h-screen bg-gray-100">
      <aside className="w-64 bg-gray-800 text-white flex flex-col shadow-xl">
        <div className="p-6 text-2xl font-bold text-indigo-400 border-b">
          Área Tributaria
        </div>
        <nav className="flex-1 p-4 space-y-2">
          {Object.values(MODULES).map((mod) => (
            <button
              key={mod}
              onClick={() => setActive(mod)}
              className={`w-full px-4 py-3 rounded-lg text-left ${
                active === mod
                  ? "bg-indigo-600 text-white"
                  : "hover:bg-gray-700 text-gray-300"
              }`}
            >
              {mod}
            </button>
          ))}
        </nav>
      </aside>

      <main className="flex-1 p-6">
        {active === MODULES.CONFIG && <TaxConfig />}
        {active === MODULES.DAILY && <DailyOps />}
        {active === MODULES.MONTHLY && <MonthlyClosing />}
      </main>
    </div>
  );
}

'''

### components/TaxConfig.jsx
'''
import React, { useState } from "react";

export default function TaxConfig() {
  const [step, setStep] = useState("start");
  const [profile, setProfile] = useState(null);
  const [catalog, setCatalog] = useState(null);
  const [validated, setValidated] = useState(null);

  const handleSubmitProfile = () => {
    setProfile({ ruc: "20123456789", razon: "Empresa XYZ SAC" });
    setStep("params");
  };

  const handleSubmitParams = () => {
    setStep("catalog");
  };

  const handleUploadCatalog = () => {
    setCatalog("CatalogoCarga.csv");
    setStep("validation");
    setTimeout(() => {
      const ok = Math.random() > 0.3;
      setValidated(ok);
      setStep(ok ? "success" : "error");
    }, 1000);
  };

  return (
    <div className="p-6 bg-white rounded-xl shadow-lg space-y-4">
      <h2 className="text-xl font-bold text-indigo-600">
        Proceso 1 – Configuración Tributaria
      </h2>

      {step === "start" && (
        <button
          onClick={handleSubmitProfile}
          className="px-4 py-2 bg-indigo-500 text-white rounded-lg"
        >
          Completar formulario "Alta contribuyente"
        </button>
      )}

      {step === "params" && (
        <button
          onClick={handleSubmitParams}
          className="px-4 py-2 bg-green-500 text-white rounded-lg"
        >
          Confirmar Parámetros Tributarios mínimos
        </button>
      )}

      {step === "catalog" && (
        <button
          onClick={handleUploadCatalog}
          className="px-4 py-2 bg-blue-500 text-white rounded-lg"
        >
          Subir catálogo de productos/servicios (CSV)
        </button>
      )}

      {step === "validation" && <p>Validando catálogo y RUC...</p>}

      {step === "error" && (
        <div>
          <p className="text-red-600 font-medium">
            Validación fallida → InformeValidacion.pdf generado
          </p>
          <button
            onClick={handleSubmitProfile}
            className="px-4 py-2 mt-2 bg-orange-500 text-white rounded-lg"
          >
            Reintentar Alta contribuyente
          </button>
        </div>
      )}

      {step === "success" && (
        <div className="space-y-2">
          <p className="text-green-600 font-medium">
            Perfil fiscal activo y parámetros guardados.
          </p>
          <ul className="list-disc list-inside text-sm">
            <li>CatalogoProductos.csv</li>
            <li>ParametrosTributarios_v1.json</li>
            <li>AuditLogEntry creado</li>
          </ul>
        </div>
      )}
    </div>
  );
}

'''

### components/auth/LoginForm.jsx
'''
import React, { useState } from 'react';
import { useAuth } from '../../hooks/useAuth';
import { useNavigate } from 'react-router-dom';
import Button from '../common/Button';
import Input from '../common/Input';
import './LoginForm.css';

const LoginForm = () => {
  console.log('🎯 LoginForm component is rendering');
  
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  const { login } = useAuth();
  const navigate = useNavigate();
  
  console.log('🎯 LoginForm hooks initialized, login function:', typeof login);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    // Limpiar error cuando el usuario empiece a escribir
    if (error) setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    console.log('🔍 Iniciando login con datos:', formData);

    try {
      const result = await login(formData);
      console.log('🔍 Resultado del login:', result);
      
      if (result.success) {
        console.log('✅ Login exitoso, redireccionando...');
        // Redireccionar al dashboard después del login exitoso
        navigate('/dashboard');
      } else {
        console.log('❌ Error en login:', result.error);
        setError(result.error || 'Error durante el login');
      }
    } catch (err) {
      console.log('❌ Excepción durante login:', err);
      setError('Error de conexión. Intente nuevamente.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="login-form-container">
      <div className="login-form-card">
        <div className="login-header">
          <div className="login-logo">
            <h1>SISAC-ERP</h1>
            <p>Sistema Integral de Administración Contable</p>
          </div>
        </div>
        
        <form onSubmit={handleSubmit} className="login-form">
          <div className="form-group">
            <Input
              type="email"
              name="email"
              placeholder="Correo electrónico"
              value={formData.email}
              onChange={handleChange}
              required
              disabled={loading}
              icon="✉️"
            />
          </div>

          <div className="form-group">
            <Input
              type="password"
              name="password"
              placeholder="Contraseña"
              value={formData.password}
              onChange={handleChange}
              required
              disabled={loading}
              icon="🔒"
            />
          </div>

          {error && (
            <div className="error-message">
              <span>⚠️ {error}</span>
            </div>
          )}

          <Button
            type="submit"
            variant="primary"
            disabled={loading || !formData.email || !formData.password}
            fullWidth
          >
            {loading ? 'Iniciando sesión...' : 'Iniciar Sesión'}
          </Button>
        </form>

        <div className="login-footer">
          <div className="test-credentials">
            <h4>Credenciales de Prueba:</h4>
            <div className="credential-item">
              <strong>Gestión Tributaria:</strong> tributario@sisac.com / admin123
            </div>
            <div className="credential-item">
              <strong>Pago de Planilla:</strong> planilla@sisac.com / admin123
            </div>
            <div className="credential-item">
              <strong>Contratación:</strong> contratacion@sisac.com / admin123
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginForm;
'''

### components/auth/ProtectedRoute.jsx
'''
import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';

const ProtectedRoute = ({ children, requiredRole = null, requiredPermission = null }) => {
  const { isAuthenticated, loading, hasRole, hasPermission } = useAuth();
  const location = useLocation();

  // Mostrar loading mientras se valida la autenticación
  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>Verificando autenticación...</p>
        </div>
      </div>
    );
  }

  // Si no está autenticado, redirigir al login
  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // Si se requiere un rol específico y el usuario no lo tiene
  if (requiredRole && !hasRole(requiredRole)) {
    return (
      <div className="access-denied">
        <div className="access-denied-content">
          <h2>Acceso Denegado</h2>
          <p>No tienes permisos para acceder a esta sección.</p>
          <p>Rol requerido: <strong>{requiredRole}</strong></p>
          <button onClick={() => window.history.back()}>Volver</button>
        </div>
      </div>
    );
  }

  // Si se requiere un permiso específico y el usuario no lo tiene
  if (requiredPermission && !hasPermission(requiredPermission)) {
    return (
      <div className="access-denied">
        <div className="access-denied-content">
          <h2>Acceso Denegado</h2>
          <p>No tienes permisos para acceder a esta funcionalidad.</p>
          <p>Permiso requerido: <strong>{requiredPermission}</strong></p>
          <button onClick={() => window.history.back()}>Volver</button>
        </div>
      </div>
    );
  }

  // Si todas las validaciones pasan, mostrar el contenido
  return children;
};

export default ProtectedRoute;
'''

### components/common/Button.jsx
'''
import React from 'react';
import '@styles/Button.css'; // Crea este archivo CSS

const Button = ({ children, onClick, type = 'button', className = '' }) => {
    return (
        <button type={type} onClick={onClick} className={`btn ${className}`}>
            {children}
        </button>
    );
};

export default Button;
'''

### components/common/Input.jsx
'''
import React from 'react';
import '@styles/Input.css'; // Crea este archivo CSS

const Input = ({ label, type = 'text', name, value, onChange, required, className = '' }) => {
    return (
        <div className={`input-group ${className}`}>
            <label htmlFor={name}>{label}</label>
            <input
                type={type}
                id={name}
                name={name}
                value={value}
                onChange={onChange}
                required={required}
            />
        </div>
    );
};

export default Input;
'''

### components/common/PermissionGuard.jsx
'''
import React from 'react';
import { usePermissions } from '../../hooks/usePermissions';

const PermissionGuard = ({ 
  children, 
  permission = null, 
  permissions = [], 
  role = null, 
  roles = [], 
  requireAll = false,
  fallback = null 
}) => {
  const { hasPermission, hasAnyPermission, hasRole, hasAnyRole } = usePermissions();

  // Verificar permisos individuales
  if (permission && !hasPermission(permission)) {
    return fallback;
  }

  // Verificar lista de permisos
  if (permissions.length > 0) {
    const hasRequiredPermissions = requireAll 
      ? permissions.every(p => hasPermission(p))
      : hasAnyPermission(permissions);
      
    if (!hasRequiredPermissions) {
      return fallback;
    }
  }

  // Verificar rol individual
  if (role && !hasRole(role)) {
    return fallback;
  }

  // Verificar lista de roles
  if (roles.length > 0 && !hasAnyRole(roles)) {
    return fallback;
  }

  // Si todas las validaciones pasan, mostrar el contenido
  return children;
};

export default PermissionGuard;
'''

### components/ui/Navbar.jsx
'''
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import NotificationBell from '@components/NotificationBell.jsx'; // Importamos el nuevo componente

const Navbar = ({ user, onLogout }) => {
    const [showProfileMenu, setShowProfileMenu] = useState(false);
    const navigate = useNavigate();

    const handleLogout = () => {
        if (window.confirm('¿Estás seguro de que quieres cerrar sesión?')) {
            onLogout();
            navigate('/login');
        }
    };

    return (
        <header className="navbar">
            <div className="navbar-logo">
                <h2>SISAC</h2>
            </div>
            <div className="navbar-user">
                {/* ... (código existente del perfil de usuario) ... */}
                <span className="user-name">
                    {user?.firstName} {user?.lastName}
                </span>

                <div
                    className="profile-container"
                    onMouseEnter={() => setShowProfileMenu(true)}
                    onMouseLeave={() => setShowProfileMenu(false)}
                >
                    <img
                        src={user?.profilePic || "/src/assets/images/default-avatar.png"}
                        alt="Perfil"
                        className="profile-mini"
                    />
                    {showProfileMenu && (
                        <div className="profile-menu">
                            <button onClick={() => navigate('/dashboard/edit-profile')}>
                                Editar Perfil
                            </button>
                            {/* ¡Nueva opción agregada! */}
                            <button onClick={() => navigate('/dashboard/payroll-selfservice')}>
                                Mi Nómina
                            </button>
                            <button onClick={handleLogout}>Cerrar Sesión</button>
                        </div>
                    )}
                </div>
                {/* Usamos el nuevo componente */}
                <NotificationBell />
            </div>
        </header>
    );
};

export default Navbar;
'''

### components/ui/SideBar.jsx
'''
// src/ui/Sidebar.jsx
import React, { useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import PermissionGuard from '../common/PermissionGuard';

// Configuración de navegación por rol
const getNavigationByRole = (role) => {
  switch(role) {
    case 'ADMIN_TRIBUTARIO':
      return [
        { 
          name: 'Dashboard', 
          path: '/dashboard', 
          icon: '📊',
          permission: 'view_dashboard'
        },
        { 
          name: 'Configuración Tributaria', 
          path: '/tax/config', 
          icon: '⚙️',
          permission: 'manage_tax_config'
        },
        { 
          name: 'Operación Diaria', 
          path: '/tax/daily', 
          icon: '📅',
          permission: 'manage_daily_operations'
        },
        { 
          name: 'Cierre Mensual', 
          path: '/tax/closing', 
          icon: '📋',
          permission: 'manage_monthly_closing'
        }
      ];
    
    case 'GESTOR_PLANILLA':
      return [
        { 
          name: 'Dashboard', 
          path: '/dashboard', 
          icon: '📊',
          permission: 'view_dashboard'
        },
        { 
          name: 'Maestros y Config', 
          path: '/masters/legal-parameters', 
          icon: '⚙️',
          permission: 'manage_legal_parameters'
        },
        { 
          name: 'Ingreso Novedades', 
          path: '/payroll/novelties', 
          icon: '✏️',
          permission: 'manage_payroll_novelties'
        },
        { 
          name: 'Revisión Pre-Nómina', 
          path: '/payroll/review', 
          icon: '☑️',
          permission: 'review_pre_payroll'
        },
        { 
          name: 'Resumen Planilla', 
          path: '/reports/summary', 
          icon: '📊',
          permission: 'generate_payroll_reports'
        },
        { 
          name: 'Archivos de Salida', 
          path: '/reports/output-files', 
          icon: '💾',
          permission: 'manage_output_files'
        }
      ];
    
    case 'GESTOR_CONTRATACION':
      return [
        { 
          name: 'Dashboard', 
          path: '/dashboard', 
          icon: '📊',
          permission: 'view_dashboard'
        },
        { 
          name: 'Gestión Convocatorias', 
          path: '/hiring/convocatorias', 
          icon: '📢',
          permission: 'manage_job_postings'
        },
        { 
          name: 'Postulantes', 
          path: '/hiring/candidates', 
          icon: '👥',
          permission: 'manage_candidates'
        },
        { 
          name: 'Entrevistas', 
          path: '/hiring/interviews', 
          icon: '💬',
          permission: 'manage_interviews'
        },
        { 
          name: 'Empleados', 
          path: '/hiring/employees', 
          icon: '👤',
          permission: 'manage_employees'
        },
        { 
          name: 'Reportes', 
          path: '/hiring/reports', 
          icon: '📈',
          permission: 'view_hiring_reports'
        }
      ];
    
    default: 
      return [
        { 
          name: 'Dashboard', 
          path: '/dashboard', 
          icon: '📊',
          permission: 'view_dashboard'
        }
      ];
  }
};

const Sidebar = () => {
    const [isCollapsed, setIsCollapsed] = useState(false);
    const { user, userRole } = useAuth();
    const location = useLocation();
    
    const navigation = getNavigationByRole(userRole);

    const toggleSidebar = () => {
        setIsCollapsed(!isCollapsed);
    };

    return (
        <aside className={`sidebar ${isCollapsed ? 'collapsed' : ''}`}>
            <div className="sidebar-header">
                <div className="sidebar-logo">
                    <h2>{isCollapsed ? 'S' : 'SISAC'}</h2>
                    {!isCollapsed && <span className="sidebar-subtitle">ERP</span>}
                </div>
                <button 
                    className="sidebar-toggle"
                    onClick={toggleSidebar}
                    aria-label="Toggle sidebar"
                >
                    {isCollapsed ? '▶' : '◀'}
                </button>
            </div>

            <nav className="sidebar-nav">
                <div className="nav-section">
                    {!isCollapsed && (
                        <div className="nav-section-title">
                            <span>Módulo: {user?.rolDescripcion}</span>
                        </div>
                    )}
                    
                    <ul className="nav-list">
                        {navigation.map((item, index) => (
                            <PermissionGuard key={index} permission={item.permission}>
                                <li className="nav-item">
                                    <Link 
                                        to={item.path} 
                                        className={`nav-link ${location.pathname === item.path ? 'active' : ''}`}
                                        title={isCollapsed ? item.name : ''}
                                    >
                                        <span className="nav-icon">{item.icon}</span>
                                        {!isCollapsed && (
                                            <span className="nav-text">{item.name}</span>
                                        )}
                                    </Link>
                                </li>
                            </PermissionGuard>
                        ))}
                    </ul>
                </div>

                {!isCollapsed && (
                    <div className="sidebar-footer">
                        <div className="user-info">
                            <div className="user-avatar">
                                {user?.nombreCompleto?.charAt(0) || 'U'}
                            </div>
                            <div className="user-details">
                                <span className="user-name">{user?.nombreCompleto}</span>
                                <span className="user-role">{user?.rolDescripcion}</span>
                            </div>
                        </div>
                    </div>
                )}
            </nav>
        </aside>
    );
};

export default Sidebar;
'''

### components/ui/TopNavbar.jsx
'''
import React, { useState, useRef, useEffect } from 'react';
import { useAuth } from '../../hooks/useAuth';
import { useNavigate } from 'react-router-dom';
import './TopNavbar.css';

const TopNavbar = () => {
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  const dropdownRef = useRef(null);

  // Cerrar dropdown al hacer click fuera
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setDropdownOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  const handleProfileClick = () => {
    navigate('/profile');
    setDropdownOpen(false);
  };

  const toggleDropdown = () => {
    setDropdownOpen(!dropdownOpen);
  };

  return (
    <header className="top-navbar">
      <div className="navbar-content">
        {/* Título de la sección actual */}
        <div className="navbar-title">
          <h1>Sistema Integral de Administración Contable</h1>
          <span className="navbar-subtitle">
            Módulo: {user?.rolDescripcion || 'Cargando...'}
          </span>
        </div>

        {/* Sección derecha con usuario */}
        <div className="navbar-right">
          {/* Notificaciones (placeholder) */}
          <div className="navbar-notifications">
            <button className="notification-btn" title="Notificaciones">
              <span className="notification-icon">🔔</span>
              <span className="notification-badge">3</span>
            </button>
          </div>

          {/* Información del usuario */}
          <div className="navbar-user" ref={dropdownRef}>
            <button 
              className="user-button"
              onClick={toggleDropdown}
              aria-expanded={dropdownOpen}
              aria-haspopup="true"
            >
              <div className="user-avatar">
                {user?.nombreCompleto?.charAt(0) || 'U'}
              </div>
              <div className="user-info">
                <span className="user-name">
                  {user?.nombreCompleto || 'Usuario'}
                </span>
                <span className="user-role">
                  {user?.rol || 'Sin rol'}
                </span>
              </div>
              <span className={`dropdown-arrow ${dropdownOpen ? 'open' : ''}`}>
                ▼
              </span>
            </button>

            {/* Dropdown Menu */}
            {dropdownOpen && (
              <div className="user-dropdown">
                <div className="dropdown-header">
                  <div className="dropdown-user-info">
                    <strong>{user?.nombreCompleto}</strong>
                    <small>{user?.email}</small>
                  </div>
                </div>
                
                <div className="dropdown-divider"></div>
                
                <button 
                  className="dropdown-item"
                  onClick={handleProfileClick}
                >
                  <span className="dropdown-icon">👤</span>
                  Mi Perfil
                </button>
                
                <button 
                  className="dropdown-item"
                  onClick={() => {
                    // Aquí podrías añadir lógica para configuración
                    setDropdownOpen(false);
                  }}
                >
                  <span className="dropdown-icon">⚙️</span>
                  Configuración
                </button>
                
                <div className="dropdown-divider"></div>
                
                <button 
                  className="dropdown-item logout-item"
                  onClick={handleLogout}
                >
                  <span className="dropdown-icon">🚪</span>
                  Cerrar Sesión
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  );
};

export default TopNavbar;
'''

### contexts/AuthContext.jsx
'''
import React, { createContext, useState, useContext, useEffect } from 'react';

// Definición de permisos por rol
const ROLE_PERMISSIONS = {
  ADMIN_TRIBUTARIO: [
    'view_dashboard',
    'manage_tax_config',
    'manage_daily_operations',
    'manage_monthly_closing',
    'view_tax_reports'
  ],
  GESTOR_PLANILLA: [
    'view_dashboard',
    'manage_legal_parameters',
    'manage_payroll_novelties',
    'review_pre_payroll',
    'generate_payroll_reports',
    'manage_output_files'
  ],
  GESTOR_CONTRATACION: [
    'view_dashboard',
    'manage_job_postings',
    'manage_candidates',
    'manage_interviews',
    'manage_employees',
    'view_hiring_reports'
  ]
};

// Crear el contexto
const AuthContext = createContext();

// Exportar el contexto para uso en hooks
export { AuthContext };

// Proveedor del contexto de autenticación
export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem('token'));
  const [loading, setLoading] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // Función para hacer login
  const login = async (credentials) => {
    console.log('🚀 AuthContext: Iniciando petición de login:', credentials);
    
    try {
      console.log('🌐 Enviando petición a: http://localhost:8081/api/auth/login');
      
      const response = await fetch('http://localhost:8081/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(credentials),
      });

      console.log('📡 Respuesta recibida - Status:', response.status, 'OK:', response.ok);

      if (response.ok) {
        const data = await response.json();
        console.log('✅ Datos del login exitoso:', data);
        
        // Guardar token en localStorage
        localStorage.setItem('token', data.token);
        setToken(data.token);
        
        // Crear objeto de usuario
        const userData = {
          id: data.userId,
          email: data.email,
          nombreCompleto: data.nombreCompleto,
          rol: data.rol,
          rolDescripcion: data.rolDescripcion,
          permissions: ROLE_PERMISSIONS[data.rol] || []
        };
        
        setUser(userData);
        setIsAuthenticated(true);
        
        return { success: true, user: userData };
      } else {
        const errorData = await response.json();
        console.log('❌ Error del servidor:', response.status, errorData);
        return { success: false, error: errorData.message || 'Error de login' };
      }
    } catch (error) {
      console.error('❌ Error durante el login (excepción):', error);
      return { success: false, error: 'Error de conexión' };
    }
  };

  // Función para hacer logout
  const logout = () => {
    localStorage.removeItem('token');
    setToken(null);
    setUser(null);
    setIsAuthenticated(false);
  };

  // Función para validar token existente
  const validateToken = async () => {
    if (!token) {
      setLoading(false);
      return;
    }

    try {
      const response = await fetch('http://localhost:8081/api/auth/validate', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const userData = await response.json();
        
        // Crear objeto de usuario con permisos
        const userWithPermissions = {
          id: userData.userId,
          email: userData.email,
          nombreCompleto: userData.nombreCompleto,
          rol: userData.rol,
          rolDescripcion: userData.rolDescripcion,
          permissions: ROLE_PERMISSIONS[userData.rol] || []
        };
        
        setUser(userWithPermissions);
        setIsAuthenticated(true);
      } else {
        // Token inválido, limpiar datos
        logout();
      }
    } catch (error) {
      console.error('Error validando token:', error);
      logout();
    } finally {
      setLoading(false);
    }
  };

  // Función para obtener información del usuario
  const getUserInfo = async () => {
    if (!token) return null;

    try {
      const response = await fetch('http://localhost:8081/api/auth/user-info', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const userData = await response.json();
        return userData;
      }
    } catch (error) {
      console.error('Error obteniendo información del usuario:', error);
    }
    return null;
  };

  // Función para verificar permisos
  const hasPermission = (permission) => {
    if (!user || !user.permissions) return false;
    return user.permissions.includes(permission);
  };

  // Función para verificar múltiples permisos
  const hasAnyPermission = (permissions) => {
    if (!user || !user.permissions) return false;
    return permissions.some(permission => user.permissions.includes(permission));
  };

  // Función para verificar rol específico
  const hasRole = (role) => {
    if (!user) return false;
    return user.rol === role;
  };

  // Función para verificar si tiene alguno de los roles especificados
  const hasAnyRole = (roles) => {
    if (!user) return false;
    return roles.includes(user.rol);
  };

  // Efecto para validar token al cargar
  useEffect(() => {
    validateToken();
  }, [token]);

  // Valor del contexto
  const contextValue = {
    user,
    token,
    loading,
    isAuthenticated,
    login,
    logout,
    validateToken,
    getUserInfo,
    hasPermission,
    hasAnyPermission,
    hasRole,
    hasAnyRole,
    // Datos adicionales útiles
    permissions: user?.permissions || [],
    userRole: user?.rol,
    userName: user?.nombreCompleto,
    userEmail: user?.email
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};
'''

### features/convocatorias/api/convocatorias.js
'''
import axios from 'axios';

const API_BASE_URL = 'http://localhost:8081/api';

// Configurar axios instance con interceptores para JWT
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor para agregar token JWT automáticamente
apiClient.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// API para Convocatorias
export const convocatoriasApi = {
  // Obtener todas las convocatorias
  getAll: () => apiClient.get('/convocatorias'),
  
  // Obtener convocatoria por ID
  getById: (id) => apiClient.get(`/convocatorias/${id}`),
  
  // Crear nueva convocatoria
  create: (convocatoria) => apiClient.post('/convocatorias', convocatoria),
  
  // Actualizar convocatoria
  update: (id, convocatoria) => apiClient.put(`/convocatorias/${id}`, convocatoria),
  
  // Eliminar convocatoria
  delete: (id) => apiClient.delete(`/convocatorias/${id}`),
};

// API para Candidatos
export const candidatosApi = {
  // Obtener todos los candidatos
  getAll: () => apiClient.get('/candidatos'),
  
  // Obtener candidato por ID
  getById: (id) => apiClient.get(`/candidatos/${id}`),
  
  // Obtener candidato por email
  getByEmail: (email) => apiClient.get(`/candidatos/email/${email}`),
  
  // Crear nuevo candidato
  create: (candidato) => apiClient.post('/candidatos', candidato),
  
  // Actualizar candidato
  update: (id, candidato) => apiClient.put(`/candidatos/${id}`, candidato),
  
  // Eliminar candidato
  delete: (id) => apiClient.delete(`/candidatos/${id}`),
};

// API para Postulaciones
export const postulacionesApi = {
  // Obtener todas las postulaciones
  getAll: () => apiClient.get('/postulaciones'),
  
  // Obtener postulación por ID
  getById: (id) => apiClient.get(`/postulaciones/${id}`),
  
  // Crear nueva postulación
  create: (postulacion) => apiClient.post('/postulaciones', postulacion),
  
  // Actualizar postulación
  update: (id, postulacion) => apiClient.put(`/postulaciones/${id}`, postulacion),
  
  // Eliminar postulación
  delete: (id) => apiClient.delete(`/postulaciones/${id}`),
  
  // Postular candidato a convocatoria
  postular: (candidatoId, convocatoriaId) => 
    apiClient.post('/postulaciones/postular', { candidatoId, convocatoriaId }),
};

// API para Entrevistas
export const entrevistasApi = {
  // Obtener todas las entrevistas
  getAll: () => apiClient.get('/entrevistas'),
  
  // Obtener entrevista por ID
  getById: (id) => apiClient.get(`/entrevistas/${id}`),
  
  // Crear nueva entrevista
  create: (entrevista) => apiClient.post('/entrevistas', entrevista),
  
  // Actualizar entrevista
  update: (id, entrevista) => apiClient.put(`/entrevistas/${id}`, entrevista),
  
  // Eliminar entrevista
  delete: (id) => apiClient.delete(`/entrevistas/${id}`),
  
  // Programar entrevista
  programar: (postulacionId, entrevista) => 
    apiClient.post('/entrevistas/programar', { postulacionId, ...entrevista }),
};

export default {
  convocatorias: convocatoriasApi,
  candidatos: candidatosApi,
  postulaciones: postulacionesApi,
  entrevistas: entrevistasApi,
};
'''

### features/convocatorias/pages/ConvocatoriasDashboardPage.jsx
'''
import React, { useState, useEffect } from 'react';
import { convocatoriasApi, candidatosApi, postulacionesApi } from '../api/convocatorias';
import { useAuth } from '../../../hooks/useAuth';
import '../styles/ConvocatoriasDashboard.css';

const ConvocatoriasDashboardPage = () => {
  const { user } = useAuth();
  const [convocatorias, setConvocatorias] = useState([]);
  const [candidatos, setCandidatos] = useState([]);
  const [postulaciones, setPostulaciones] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('convocatorias');

  // Verificar permisos de gestión de contratación
  console.log('🔍 Debug user:', user);
  console.log('🔍 Debug user.rol:', user?.rol);
  console.log('🔍 Debug user.permissions:', user?.permissions);
  
  const hasPermission = user?.permissions?.includes('manage_job_postings') || user?.rol === 'ADMIN_TRIBUTARIO';
  console.log('🔍 Debug hasPermission:', hasPermission);

  useEffect(() => {
    if (hasPermission) {
      fetchData();
    }
  }, [hasPermission]);

  const fetchData = async () => {
    setLoading(true);
    try {
      const [convocatoriasRes, candidatosRes, postulacionesRes] = await Promise.all([
        convocatoriasApi.getAll(),
        candidatosApi.getAll(),
        postulacionesApi.getAll()
      ]);
      
      setConvocatorias(convocatoriasRes.data || []);
      setCandidatos(candidatosRes.data || []);
      setPostulaciones(postulacionesRes.data || []);
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  if (!hasPermission) {
    return (
      <div className="dashboard-page">
        <div className="access-denied">
          <h2>Acceso Denegado</h2>
          <p>No tienes permisos para acceder al módulo de Gestión de Convocatorias.</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="dashboard-page">
        <div className="loading">
          <p>Cargando dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="dashboard-page convocatorias-dashboard">
      <div className="dashboard-header">
        <h1>Gestión de Convocatorias</h1>
        <p>Administra convocatorias, candidatos y procesos de selección</p>
      </div>

      {/* Estadísticas principales */}
      <div className="dashboard-stats">
        <div className="stat-card">
          <div className="stat-icon">📋</div>
          <div className="stat-content">
            <h3>{convocatorias.length}</h3>
            <p>Convocatorias Activas</p>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">👥</div>
          <div className="stat-content">
            <h3>{candidatos.length}</h3>
            <p>Candidatos Registrados</p>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">📝</div>
          <div className="stat-content">
            <h3>{postulaciones.length}</h3>
            <p>Postulaciones</p>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">✅</div>
          <div className="stat-content">
            <h3>{postulaciones.filter(p => p.estado === 'APROBADO').length}</h3>
            <p>Contrataciones</p>
          </div>
        </div>
      </div>

      {/* Navegación por pestañas */}
      <div className="dashboard-tabs">
        <button 
          className={`tab-button ${activeTab === 'convocatorias' ? 'active' : ''}`}
          onClick={() => setActiveTab('convocatorias')}
        >
          Convocatorias
        </button>
        <button 
          className={`tab-button ${activeTab === 'candidatos' ? 'active' : ''}`}
          onClick={() => setActiveTab('candidatos')}
        >
          Candidatos
        </button>
        <button 
          className={`tab-button ${activeTab === 'postulaciones' ? 'active' : ''}`}
          onClick={() => setActiveTab('postulaciones')}
        >
          Postulaciones
        </button>
      </div>

      {/* Contenido de pestañas */}
      <div className="dashboard-content">
        {activeTab === 'convocatorias' && (
          <div className="convocatorias-section">
            <div className="section-header">
              <h2>Convocatorias Recientes</h2>
              <button className="btn-primary">+ Nueva Convocatoria</button>
            </div>
            <div className="convocatorias-grid">
              {convocatorias.slice(0, 6).map(convocatoria => (
                <div key={convocatoria.id} className="convocatoria-card">
                  <h3>{convocatoria.titulo}</h3>
                  <p>{convocatoria.descripcion}</p>
                  <div className="convocatoria-meta">
                    <span className={`status ${convocatoria.estado?.toLowerCase()}`}>
                      {convocatoria.estado}
                    </span>
                    <span className="fecha">
                      {new Date(convocatoria.fechaInicio).toLocaleDateString()}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'candidatos' && (
          <div className="candidatos-section">
            <div className="section-header">
              <h2>Candidatos Recientes</h2>
              <button className="btn-primary">+ Nuevo Candidato</button>
            </div>
            <div className="candidatos-list">
              {candidatos.slice(0, 10).map(candidato => (
                <div key={candidato.id} className="candidato-item">
                  <div className="candidato-info">
                    <h4>{candidato.nombre} {candidato.apellido}</h4>
                    <p>{candidato.email}</p>
                    <p>{candidato.telefono}</p>
                  </div>
                  <div className="candidato-actions">
                    <button className="btn-secondary">Ver Perfil</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {activeTab === 'postulaciones' && (
          <div className="postulaciones-section">
            <div className="section-header">
              <h2>Postulaciones Recientes</h2>
            </div>
            <div className="postulaciones-list">
              {postulaciones.slice(0, 10).map(postulacion => (
                <div key={postulacion.id} className="postulacion-item">
                  <div className="postulacion-info">
                    <h4>Postulación #{postulacion.id}</h4>
                    <p>Estado: <span className={`status ${postulacion.estado?.toLowerCase()}`}>
                      {postulacion.estado}
                    </span></p>
                    <p>Fecha: {new Date(postulacion.fechaPostulacion).toLocaleDateString()}</p>
                  </div>
                  <div className="postulacion-actions">
                    <button className="btn-secondary">Ver Detalles</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ConvocatoriasDashboardPage;
'''

### features/employees/components/DashboardWidget.jsx
'''
import React from 'react';

const DashboardWidget = ({ title, content, icon }) => {
  return (
    <div className="dashboard-widget">
      <div className="widget-header">
        {icon && <span className="widget-icon">{icon}</span>}
        <h3>{title}</h3>
      </div>
      <div className="widget-content">
        {content}
      </div>
    </div>
  );
};

export default DashboardWidget;
'''

### features/employees/components/NotificationBell.jsx
'''
import React, { useState } from 'react';

const NotificationBell = () => {
    const [showNotifications, setShowNotifications] = useState(false);

    // ** Lógica de notificaciones, idealmente fetch del API **
    const notifications = [
        { id: 1, message: 'Nueva solicitud de acceso pendiente.' },
        { id: 2, message: 'Actualización en el sistema de planillas.' }
    ];

    return (
        <div
            className="notification-container"
            onClick={() => setShowNotifications(!showNotifications)}
        >
            <span className="notification-bell">🔔</span>
            {notifications.length > 0 && (
                <span className="notification-badge">{notifications.length}</span>
            )}
            {showNotifications && (
                <div className="notifications-dropdown">
                    {notifications.length > 0 ? (
                        <ul>
                            {notifications.map((notif) => (
                                <li key={notif.id}>{notif.message}</li>
                            ))}
                        </ul>
                    ) : (
                        <p>No hay notificaciones nuevas.</p>
                    )}
                </div>
            )}
        </div>
    );
};

export default NotificationBell;
'''

### features/employees/components/PaystubDownloadWidget.jsx
'''
import React, { useState } from 'react';
import { ReceiptText, Download } from 'lucide-react';

/**
 * Componente para mostrar boletas y permitir la descarga.
 * @param {{paystubs: Array<{id: number, period: string, amount: number}>}} props
 */
const PaystubDownloadWidget = ({ paystubs }) => {
    const [loading, setLoading] = useState(false);

    const showMessage = (message) => console.log(`[Message Box]: ${message}`);

    const handleDownload = (period) => {
        setLoading(true);
        showMessage(`Descargando boleta de ${period}...`);
        setTimeout(() => {
            setLoading(false);
            showMessage(`Boleta de ${period} descargada con éxito.`);
        }, 1500);
    };

    return (
        <div className="bg-white p-6 rounded-xl shadow-xl w-full">
            <h3 className="text-2xl font-bold text-gray-800 mb-6 flex items-center">
                <ReceiptText className="w-6 h-6 mr-2 text-indigo-600" />
                Mis Boletas Electrónicas
            </h3>
            <div className="space-y-4">
                {paystubs.map((stub) => (
                    <div key={stub.id} className="flex items-center justify-between p-3 border-b last:border-b-0">
                        <div className="flex flex-col">
                            <span className="font-semibold text-gray-700">{stub.period}</span>
                            <span className="text-sm text-gray-500">Monto Neto: S/ {stub.amount.toFixed(2)}</span>
                        </div>
                        {/* Se ajusta el estilo del botón */}
                        <button
                            onClick={() => handleDownload(stub.period)}
                            disabled={loading}
                            className={`flex items-center justify-center p-2 rounded-lg transition font-medium ${loading ? 'bg-gray-400 cursor-not-allowed' : 'bg-green-600 text-white hover:bg-green-700'}`}
                        >
                            {/* Texto solo en pantallas grandes */}
                            <span className="hidden sm:inline">Descargar</span>
                            <Download className="w-4 h-4 sm:ml-2" />
                        </button>
                    </div>
                ))}
            </div>
            {paystubs.length === 0 && <p className="text-gray-500 text-center py-4">Aún no hay boletas disponibles.</p>}
        </div>
    );
};

export default PaystubDownloadWidget;
'''

### features/employees/pages/DashboardPage.jsx
'''
import React from 'react';
import { useAuth } from '../../../hooks/useAuth';

const DashboardPage = () => {
    const { user } = useAuth();
    
    // ** Simulación de datos para los widgets **
    const getDashboardData = () => {
        switch(user?.rol) {
            case 'ADMIN_TRIBUTARIO':
                return {
                    title: 'Gestión Tributaria',
                    stats: [
                        { label: 'Declaraciones Pendientes', value: 15, icon: '📄' },
                        { label: 'Comprobantes Procesados', value: 245, icon: '✅' },
                        { label: 'Alertas Tributarias', value: 3, icon: '⚠️' }
                    ]
                };
            case 'GESTOR_PLANILLA':
                return {
                    title: 'Gestión de Planilla',
                    stats: [
                        { label: 'Empleados Activos', value: 150, icon: '👥' },
                        { label: 'Planillas Procesadas', value: 12, icon: '📊' },
                        { label: 'Novedades Pendientes', value: 8, icon: '📝' }
                    ]
                };
            case 'GESTOR_CONTRATACION':
                return {
                    title: 'Gestión de Contratación',
                    stats: [
                        { label: 'Postulantes Nuevos', value: 25, icon: '👤' },
                        { label: 'Entrevistas Programadas', value: 7, icon: '💬' },
                        { label: 'Contrataciones del Mes', value: 4, icon: '✨' }
                    ]
                };
            default:
                return {
                    title: 'Dashboard General',
                    stats: []
                };
        }
    };

    const dashboardData = getDashboardData();

    return (
        <div className="page-content fade-in">
            <div className="page-header">
                <h1>Bienvenido al Dashboard de SISAC</h1>
                <p>Módulo: {dashboardData.title} - {user?.nombreCompleto}</p>
            </div>
            
            <div className="dashboard-cards">
                {dashboardData.stats.map((stat, index) => (
                    <div key={index} className="dashboard-card">
                        <div className="card-header">
                            <h3 className="card-title">{stat.label}</h3>
                            <div className="card-icon">
                                {stat.icon}
                            </div>
                        </div>
                        <div className="card-value">{stat.value}</div>
                        <p className="card-description">
                            {stat.label} en el sistema actual
                        </p>
                    </div>
                ))}
            </div>

            <div className="dashboard-info">
                <div className="info-card">
                    <h3>Información del Usuario</h3>
                    <div className="info-grid">
                        <div className="info-item">
                            <label>Nombre:</label>
                            <span>{user?.nombreCompleto}</span>
                        </div>
                        <div className="info-item">
                            <label>Email:</label>
                            <span>{user?.email}</span>
                        </div>
                        <div className="info-item">
                            <label>Rol:</label>
                            <span>{user?.rolDescripcion}</span>
                        </div>
                        <div className="info-item">
                            <label>Permisos:</label>
                            <span>{user?.permissions?.length || 0} permisos asignados</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default DashboardPage;
'''

### features/employees/pages/EditProfilePage.jsx
'''
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import '@styles_e/DashboardPage.css';
import '@styles_e/EditProfile.css';
import Input from '@common/Input.jsx'; // Importa el componente Input
import Button from '@common/Button.jsx'; // Importa el componente Button

const EditProfilePage = ({ user, setUser }) => {
    // Cargar el estado inicial del usuario desde las props o localStorage
    const [profileData, setProfileData] = useState(() => {
        const storedProfile = localStorage.getItem('userProfile');
        return storedProfile ? JSON.parse(storedProfile) : (user || {});
    });
    
    const [showPassword, setShowPassword] = useState(false);
    const navigate = useNavigate();

    // Actualizar el localStorage cada vez que profileData cambie
    useEffect(() => {
        // Aseguramos que solo se guarde cuando haya datos de usuario
        if (profileData && Object.keys(profileData).length > 0) {
            localStorage.setItem('userProfile', JSON.stringify(profileData));
        }
    }, [profileData]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setProfileData({ ...profileData, [name]: value });
    };

    const handleFileChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            if (file.size > 2 * 1024 * 1024) { // 2MB
                alert('La foto es demasiado grande. Por favor, elige una más pequeña.');
                return;
            }
            const reader = new FileReader();
            reader.onloadend = () => {
                setProfileData({ ...profileData, profilePic: reader.result });
            };
            reader.readAsDataURL(file);
        }
    };

    const handleSave = (e) => {
        e.preventDefault();
        setUser(profileData);
        alert('Perfil actualizado con éxito.');
        navigate('/dashboard');
    };
    
    const handleGoBack = () => {
        navigate(-1); // Regresa a la página anterior
    };

    return (
        <div className="edit-profile-container">
            <Button onClick={handleGoBack} className="go-back-button">← Volver</Button>
            <h1>Editar Perfil</h1>
            <form onSubmit={handleSave}>
                <div className="profile-photo-section">
                    <label htmlFor="profile-upload" className="profile-photo-label">
                        <img
                            src={profileData.profilePic || "/src/assets/images/default-avatar.png"}
                            alt="Foto de Perfil"
                            className="profile-photo"
                        />
                        <span className="edit-icon">✏️</span>
                    </label>
                    <input
                        id="profile-upload"
                        type="file"
                        accept="image/png, image/jpeg"
                        onChange={handleFileChange}
                        style={{ display: 'none' }}
                    />
                </div>

                <div className="input-row">
                    <Input
                        label="Nombre:"
                        name="firstName"
                        value={profileData.firstName || ''}
                        onChange={handleChange}
                        required
                    />
                    <Input
                        label="Apellido:"
                        name="lastName"
                        value={profileData.lastName || ''}
                        onChange={handleChange}
                        required
                    />
                </div>

                <div className="input-row">
                    <Input
                        label="Teléfono:"
                        type="tel"
                        name="phone"
                        value={profileData.phone || ''}
                        onChange={handleChange}
                    />
                    <Input
                        label="Correo:"
                        type="email"
                        name="email"
                        value={profileData.email || ''}
                        onChange={handleChange}
                        required
                    />
                </div>

                <div className="input-row">
                    <Input
                        label="Puesto de trabajo:"
                        name="jobTitle"
                        value={profileData.jobTitle || ''}
                        onChange={handleChange}
                    />
                    <div className="input-group">
                        <label>Contraseña:</label>
                        <input
                            type={showPassword ? 'text' : 'password'}
                            name="password"
                            value="********" // No se puede modificar
                            disabled
                        />
                        <Button type="button" onClick={() => setShowPassword(!showPassword)}>
                            {showPassword ? 'Ocultar' : 'Mostrar'}
                        </Button>
                    </div>
                </div>
                <Button type="submit" className="save-button">Guardar cambios</Button>
            </form>
        </div>
    );
};

export default EditProfilePage;
'''

### features/employees/pages/LoginPage.jsx
'''
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import '@styles_e/Login.css';
import Input from '@common/Input.jsx'; // Importa el componente Input
import Button from '@common/Button.jsx'; // Importa el componente Button

const LoginPage = ({ onLogin }) => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const navigate = useNavigate();

    const handleLogin = (e) => {
        e.preventDefault();
        setError('');

        if (username === 'admin' && password === 'admin') {
            onLogin();
            navigate('/dashboard');
        } else {
            setError('Usuario o contraseña incorrectos.');
        }
    };

    return (
        <div className="login-container">
            <div className="login-card">
                <h2>Ingresar al sistema SISAC</h2>
                <form onSubmit={handleLogin}>
                    <Input
                        label="Usuario:"
                        type="text"
                        name="username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        required
                    />
                    <Input
                        label="Contraseña:"
                        type="password"
                        name="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        required
                    />
                    {error && <p className="error-message">{error}</p>}
                    <Button type="submit">Ingresar</Button>
                </form>
                <p>
                    ¿No tienes una cuenta? <Link to="/signup">Solicitar acceso</Link>
                </p>
            </div>
        </div>
    );
};

export default LoginPage;
'''

### features/employees/pages/PayrollSelfServicePage.jsx
'''
import React from 'react';
import { useNavigate } from 'react-router-dom'; // Importamos useNavigate
import { Briefcase, FileText, Download, ArrowLeft } from 'lucide-react';
import PaystubDownloadWidget from '@components/PaystubDownloadWidget.jsx';
import '@styles_e/PayrollSelfServicePage.css';

// Datos fijos de simulación para la demostración
const mockPaystubs = [
    { id: 1, period: 'Agosto 2025', amount: 3500.00 },
    { id: 2, period: 'Julio 2025', amount: 3500.00 },
    { id: 3, period: 'Junio 2025', amount: 3500.00 },
];

/**
 * Página del empleado para gestionar información de nómina y descargar boletas.
 */
const PayrollSelfServicePage = () => {
    const navigate = useNavigate(); // Inicializamos el hook de navegación

    return (
        <div className="payroll-page">
            <div className="payroll-container">
                {/* Botón para volver al dashboard */}
                <button
                    onClick={() => navigate('/dashboard')}
                    className="back-button"
                >
                    <ArrowLeft className="back-icon" /> Volver al Dashboard
                </button>

                <h1 className="payroll-title">Portal de Autoservicio de Nómina</h1>
                <p className="payroll-subtitle">
                    Consulta tu información de pagos y descarga tus boletas electrónicas de forma segura.
                </p>

                <div className="payroll-content">
                    {/* El widget ahora tendrá un botón más estético */}
                    <PaystubDownloadWidget paystubs={mockPaystubs} />

                    {/* Sección de datos fijos */}
                    <div className="affiliation-card">
                        <h3 className="affiliation-title">
                            <Briefcase className="icon briefcase" /> Datos de Afiliación (Solo Lectura)
                        </h3>
                        <p>
                            Régimen Laboral: <span className="data-highlight">Régimen General</span>
                        </p>
                        <p>
                            Sistema de Pensiones: <span className="data-highlight">AFP Integra (CUSPP: 12345678)</span>
                        </p>
                        <p>
                            Cuenta Bancaria CTS: <span className="data-highlight">BCP Soles (Cta: XXXX-XXXX-1234)</span>
                        </p>
                        <p className="info-text">
                            Para actualizar estos datos, por favor contacta al área de RRHH.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default PayrollSelfServicePage;
'''

### features/employees/pages/SignupPage.jsx
'''
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import '@styles_e/Login.css';
import Input from '@common/Input.jsx'; // Importa el componente Input
import Button from '@common/Button.jsx'; // Importa el componente Button

const SignupPage = () => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        name: '',
        lastname: '',
        companyCode: '',
        phone: '',
        email: '',
        jobTitle: ''
    });

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSignup = (e) => {
        e.preventDefault();
        // ** COMENTARIO: Aquí iría la lógica para enviar los datos al backend **
        console.log('Datos a enviar:', formData);
        
        alert('Solicitud de acceso enviada. Serás redirigido a la página de login.');
        navigate('/login');
    };

    return (
        <div className="login-container">
            <div className="login-card">
                <h2>Solicitar acceso a SISAC</h2>
                <form onSubmit={handleSignup}>
                    <Input
                        label="Nombre:"
                        name="name"
                        value={formData.name}
                        onChange={handleChange}
                        required
                    />
                    <Input
                        label="Apellido:"
                        name="lastname"
                        value={formData.lastname}
                        onChange={handleChange}
                        required
                    />
                    <Input
                        label="Código de empresa:"
                        name="companyCode"
                        value={formData.companyCode}
                        onChange={handleChange}
                        required
                    />
                    <Input
                        label="Teléfono:"
                        type="tel"
                        name="phone"
                        value={formData.phone}
                        onChange={handleChange}
                        required
                    />
                    <Input
                        label="Correo:"
                        type="email"
                        name="email"
                        value={formData.email}
                        onChange={handleChange}
                        required
                    />
                    <Input
                        label="Puesto de trabajo:"
                        name="jobTitle"
                        value={formData.jobTitle}
                        onChange={handleChange}
                        required
                    />
                    <Button type="submit">Solicitar</Button>
                </form>
                <p>
                    ¿Ya tienes una cuenta? <Link to="/login">Volver a login</Link>
                </p>
            </div>
        </div>
    );
};

export default SignupPage;
'''

### features/payroll/api/payroll.js
'''

'''

### features/payroll/components/common/ConceptAffectationForm.jsx
'''

'''

### features/payroll/components/common/ConceptAffectionsFrom.jsx
'''

'''

### features/payroll/components/common/DataSummaryCard.jsx
'''

'''

### features/payroll/components/common/PayrollCalendar.jsx
'''

'''

### features/payroll/components/masters/EmployeePayrollDetails.jsx
'''
// src/features/payroll/pages/EmployeePayrollDetailsPage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import Sidebar from '@ui/Sidebar.jsx'; // Asegúrate de que la ruta sea correcta
import Navbar from '@ui/Navbar.jsx'; // Asegúrate de que la ruta sea correcta
import '@styles_e/DashboardPage.css'; // O el archivo CSS que uses para el layout

const EmployeePayrollDetailsPage = ({ user, onLogout }) => {
  return (
    <div className="dashboard-layout">
      <Sidebar />
      <div className="main-content">
        <Navbar user={user} onLogout={onLogout} />
        <div className="dashboard-content p-8">
          <h1 className="text-3xl font-extrabold text-gray-900">Detalles de Nómina por Empleado</h1>
          <p className="text-gray-600 mt-2">Busca un empleado para editar su Régimen Laboral, CUSPP, Cuenta Bancaria, etc.</p>
          
          <div className="bg-white p-6 rounded-xl shadow-lg border-l-4 border-green-500 mt-6">
            <h3 className="text-xl font-semibold mb-4 text-gray-800">Editar Datos de Nómina del Empleado</h3>
            <input 
              type="text" 
              placeholder="Buscar Empleado por DNI/Código" 
              className="w-full mt-2 p-3 border border-gray-300 rounded-lg focus:border-green-500 focus:ring focus:ring-green-500 focus:ring-opacity-50" 
            />
            <button className="mt-4 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition font-medium">
              Cargar Detalles del Empleado
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EmployeePayrollDetailsPage;
'''

### features/payroll/components/masters/LegalParametersTable.jsx
'''
// src/features/payroll/pages/LegalParametersPage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import Sidebar from '@ui/Sidebar.jsx'; // Asegúrate de que la ruta sea correcta
import Navbar from '@ui/Navbar.jsx'; // Asegúrate de que la ruta sea correcta
import { Coins, Settings } from 'lucide-react'; // Simulación de iconos, asegúrate de tener lucide-react instalado

const LegalParametersPage = ({ legal, centers, user, onLogout }) => {
  // Simulación de datos si no los pasas por props
  const defaultLegal = { uit: 5150.00, rmv: 1025.00 };
  const finalLegal = legal || defaultLegal;

  return (
    <div className="dashboard-layout">
      <Sidebar />
      <div className="main-content">
        <Navbar user={user} onLogout={onLogout} />
        <div className="dashboard-content p-8">
          <h1 className="text-3xl font-extrabold text-gray-900">Maestros y Configuración</h1>
          <div className="grid grid-cols-1 gap-8 mt-6">
            
            {/* Parámetros Legales */}
            <div className="bg-white p-6 rounded-xl shadow-lg border-l-4 border-indigo-500">
              <h3 className="text-xl font-semibold mb-4 text-gray-800 flex items-center">
                <Coins className="w-5 h-5 mr-2 text-indigo-600" /> Parámetros Legales (UIT y RMV)
              </h3>
              <p className="text-gray-600">UIT actual: <span className="font-bold text-indigo-600">S/ {finalLegal.uit.toFixed(2)}</span></p>
              <p className="text-gray-600">RMV actual: <span className="font-bold text-indigo-600">S/ {finalLegal.rmv.toFixed(2)}</span></p>
              <button className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium">
                Gestionar Histórico / AFP Config
              </button>
            </div>

            {/* Gestión de Conceptos y Afectación */}
            <div className="bg-white p-6 rounded-xl shadow-lg border-l-4 border-yellow-500">
              <h3 className="text-xl font-semibold mb-4 text-gray-800 flex items-center">
                <Settings className="w-5 h-5 mr-2 text-yellow-600" /> Gestión de Conceptos y Afectación
              </h3>
              <p className="text-gray-600">Define si los haberes y descuentos están afectos a Renta de 5ta, ESSALUD, o Aportes.</p>
              <button className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium">
                Editar Conceptos
              </button>
            </div>

            {/* No se incluye CostCenterTable ya que la instrucción fue eliminar "costos" de la página */}
            {/* Puedes agregarla aquí si lo necesitas */}
          </div>
        </div>
      </div>
    </div>
  );
};

export default LegalParametersPage;
'''

### features/payroll/components/outputs/BankExportButton.jsx
'''

'''

### features/payroll/components/outputs/PaystubUploader.jsx
'''

'''

### features/payroll/components/outputs/PlameExportButton.jsx
'''

'''

### features/payroll/components/processes/MonthlyNoveltyEntry.jsx
'''
// src/features/payroll/pages/MonthlyNoveltyEntryPage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import Sidebar from '@ui/Sidebar.jsx'; // Asegúrate de que la ruta sea correcta
import Navbar from '@ui/Navbar.jsx'; // Asegúrate de que la ruta sea correcta
import '@styles_e/DashboardPage.css'; // O el archivo CSS que uses para el layout
import { Clock } from 'lucide-react'; // Simulación de icono

const MonthlyNoveltyEntryPage = ({ user, onLogout }) => {
    return (
        <div className="dashboard-layout">
            <Sidebar />
            <div className="main-content">
                <Navbar user={user} onLogout={onLogout} />
                <div className="dashboard-content p-8">
                    <h1 className="text-3xl font-extrabold text-gray-900">Ingreso de Novedades</h1>
                    <p className="text-gray-600 mt-2">Registrar horas extras, faltas, adelantos y bonificaciones del periodo actual.</p>

                    <div className="bg-white p-6 rounded-xl shadow-lg border-l-4 border-yellow-500 mt-6">
                        <h3 className="text-xl font-semibold mb-4 text-gray-800 flex items-center">
                            <Clock className="w-5 h-5 mr-2 text-yellow-600" /> Novedades Mensuales
                        </h3>
                        <p className="text-gray-600">Aquí se mostrará la interfaz para registrar las novedades de la nómina.</p>
                        <button className="mt-4 px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition font-medium">Registrar Novedades</button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default MonthlyNoveltyEntryPage;
'''

### features/payroll/components/processes/PrePayrollReviewTable.jsx
'''
// src/features/payroll/pages/PrePayrollReviewPage.jsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import Sidebar from '@ui/Sidebar.jsx';
import Navbar from '@ui/Navbar.jsx';
import '@styles_e/DashboardPage.css';
import { Calculator, Eye } from 'lucide-react'; // Simulación de iconos

const PrePayrollReviewPage = ({ user, onLogout }) => {
    const [isCalculated, setIsCalculated] = useState(false);
    const showMessage = (message) => console.log(`[Message Box]: ${message}`);

    const handleCalculate = () => {
        showMessage('Iniciando proceso de cálculo de nómina... (Simulación)');
        setTimeout(() => {
            setIsCalculated(true);
            showMessage('Cálculo finalizado.');
        }, 1000);
    };

    return (
        <div className="dashboard-layout">
            <Sidebar />
            <div className="main-content">
                <Navbar user={user} onLogout={onLogout} />
                <div className="dashboard-content p-8">
                    <h1 className="text-3xl font-extrabold text-gray-900">Revisión de Pre-Nómina</h1>
                    <p className="text-gray-600 mt-2">Inicia el cálculo y revisa los resultados antes de postear la planilla.</p>
                    
                    {/* Sección de Cálculo */}
                    <div className="bg-white p-6 rounded-xl shadow-lg border-l-4 border-indigo-500 mt-6">
                        <h3 className="text-xl font-semibold mb-4 text-gray-800 flex items-center">
                            <Calculator className="w-5 h-5 mr-2 text-indigo-600" /> 
                            Ejecutar Cálculo de Planilla
                        </h3>
                        <p className="text-gray-600">Inicia el motor de cálculo (aportes, retenciones, etc.).</p>
                        <button
                            onClick={handleCalculate}
                            className={`mt-4 px-6 py-3 text-white rounded-lg shadow-md transition font-semibold ${isCalculated ? 'bg-gray-400 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700'}`}
                            disabled={isCalculated}
                        >
                            {isCalculated ? 'Cálculo Completo' : 'Ejecutar Liquidación'}
                        </button>
                    </div>

                    {/* Sección de Revisión de Tabla */}
                    {isCalculated && (
                        <div className="bg-white p-6 rounded-xl shadow-lg border-l-4 border-green-500 animate-fadeIn mt-6">
                            <h3 className="text-xl font-semibold mb-4 text-gray-800 flex items-center">
                                <Eye className="w-5 h-5 mr-2 text-green-600" /> 
                                Pre-Nómina para Revisión
                            </h3>
                            <p className="text-lg text-green-700 font-medium">Planilla calculada exitosamente. Lista para revisión.</p>
                            <div className="overflow-x-auto mt-4 border border-gray-200 rounded-lg">
                                <table className="min-w-full divide-y divide-gray-200">
                                    <thead className="bg-gray-50">
                                        <tr>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Empleado</th>
                                            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Neto a Pagar</th>
                                        </tr>
                                    </thead>
                                    <tbody className="bg-white divide-y divide-gray-200">
                                        <tr className="hover:bg-green-50">
                                            <td className="px-6 py-4">Juan Pérez</td>
                                            <td className="px-6 py-4 font-bold text-green-700">S/ 3,120.50</td>
                                        </tr>
                                        <tr className="hover:bg-green-50">
                                            <td className="px-6 py-4">Ana Gómez</td>
                                            <td className="px-6 py-4 font-bold text-green-700">S/ 4,500.00</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <button className="mt-4 px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition font-semibold shadow-lg">
                                Postear Planilla (Finalizar)
                            </button>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default PrePayrollReviewPage;
'''

### features/payroll/components/reports/OutputFilesPage.jsx
'''
// src/features/payroll/pages/OutputFilesPage.jsx
import React from 'react';
import { Send, Download, Banknote, ReceiptText } from 'lucide-react';
import Sidebar from '@ui/SideBar.jsx';
import Navbar from '@ui/Navbar.jsx';
import '@styles_e/DashboardPage.css';

const OutputFilesPage = ({ user, onLogout }) => (
    <div className="dashboard-layout">
        <Sidebar />
        <div className="main-content">
            <Navbar user={user} onLogout={onLogout} />
            <div className="dashboard-content p-8">
                <h1 className="text-3xl font-extrabold text-gray-900">Generación de Archivos de Salida</h1>
                <p className="text-lg text-gray-600">Exporta archivos para la presentación de impuestos, pagos bancarios y boletas.</p>
                
                <div className="bg-white p-6 rounded-xl shadow-lg border-t-4 border-red-500 mt-6">
                    <h3 className="text-xl font-semibold mb-4 text-gray-800 flex items-center">
                        <Send className="w-5 h-5 mr-2 text-red-600" /> Archivos para Entidades Externas
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <button className="flex flex-col items-center p-4 bg-gray-100 rounded-lg hover:bg-indigo-50 transition border border-gray-200 shadow-sm">
                            <Download className="w-6 h-6 text-indigo-600 mb-2" />
                            <span className="font-medium">Archivo PLAME (SUNAT)</span>
                            <span className="text-sm text-gray-500">Exportar .txt</span>
                        </button>
                        <button className="flex flex-col items-center p-4 bg-gray-100 rounded-lg hover:bg-green-50 transition border border-gray-200 shadow-sm">
                            <Banknote className="w-6 h-6 text-green-600 mb-2" />
                            <span className="font-medium">Archivo Banco (BCP/Telecrédito)</span>
                            <span className="text-sm text-gray-500">Exportar .csv</span>
                        </button>
                        <button className="flex flex-col items-center p-4 bg-gray-100 rounded-lg hover:bg-blue-50 transition border border-gray-200 shadow-sm">
                            <ReceiptText className="w-6 h-6 text-blue-600 mb-2" />
                            <span className="font-medium">Boletas Electrónicas</span>
                            <span className="text-sm text-gray-500">Subir y Enviar</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
);

export default OutputFilesPage;
'''

### features/payroll/components/reports/PayrollSummaryReportPage.jsx
'''
// src/features/payroll/pages/PayrollSummaryReportPage.jsx
import React from 'react';
import { FileText } from 'lucide-react'; 
import Sidebar from '@ui/Sidebar.jsx'; 
import Navbar from '@ui/Navbar.jsx'; 
import '@styles_e/DashboardPage.css'; 

const PayrollSummaryReportPage = ({ user, onLogout }) => (
    <div className="dashboard-layout">
        <Sidebar />
        <div className="main-content">
            <Navbar user={user} onLogout={onLogout} />
            <div className="dashboard-content p-8">
                <h1 className="text-3xl font-extrabold text-gray-900">Resumen de Planilla por Periodo</h1>
                <p className="text-lg text-gray-600">Accede a la información histórica y analítica para la toma de decisiones.</p>

                <div className="bg-white p-6 rounded-xl shadow-lg border-l-4 border-blue-500 mt-6">
                    <h3 className="text-xl font-semibold mb-4 text-gray-800 flex items-center">
                        <FileText className="w-5 h-5 mr-2 text-blue-600" /> Resumen de Planilla
                    </h3>
                    <p className="text-gray-600 mb-4">Muestra el total de haberes, descuentos y aportes por mes.</p>
                    <div className="h-40 bg-gray-100 flex items-center justify-center rounded-lg text-gray-500 font-medium border border-dashed">
                        [Gráfico de barras de Gasto Salarial Mensual (Simulación)]
                    </div>
                    <button className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium">Generar Reporte Detallado</button>
                </div>
            </div>
        </div>
    </div>
);

export default PayrollSummaryReportPage;
'''

### features/payroll/hooks/usePayrollCalculations.js
'''

'''

### features/payroll/pages/LiquidationProcessPage.jsx
'''
import React from 'react';

const LiquidationProcessPage = () => {
  return (
    <div className="liquidation-process-page">
      <h1>Proceso de Liquidación</h1>
      <p>Módulo de proceso de liquidación de planilla - En desarrollo</p>
    </div>
  );
};

export default LiquidationProcessPage;
'''

### features/payroll/pages/MastersConfigPage.jsx
'''
import React from 'react';

const MastersConfigPage = () => {
  return (
    <div className="masters-config-page">
      <h1>Configuración de Maestros</h1>
      <p>Módulo de configuración de maestros de planilla - En desarrollo</p>
    </div>
  );
};

export default MastersConfigPage;
'''

### features/payroll/pages/PayrollDashboardPage.jsx
'''
import React from 'react';

const PayrollDashboardPage = () => {
  return (
    <div className="payroll-dashboard-page">
      <h1>Dashboard de Planilla</h1>
      <p>Dashboard principal del módulo de planilla - En desarrollo</p>
    </div>
  );
};

export default PayrollDashboardPage;
'''

### features/payroll/pages/ReportsPage.jsx
'''
import React from 'react';

const ReportsPage = () => {
  return (
    <div className="reports-page">
      <h1>Reportes de Planilla</h1>
      <p>Módulo de reportes de planilla - En desarrollo</p>
    </div>
  );
};

export default ReportsPage;
'''

### features/tax/pages/DailyOpsPage.jsx
'''
import React, { useState } from "react";
import { useApiClient } from "../../../api/tax";

export default function DailyOpsPage() {
  // Estado Venta
  const [ventaRuc, setVentaRuc] = useState("");
  const [items, setItems] = useState([{ productoId: 1, cantidad: 1 }]); // Simulación, deberías buscar productos
  
  // Estado Compra
  const [compraRuc, setCompraRuc] = useState("");
  const [compraFactura, setCompraFactura] = useState("");
  const [compraMonto, setCompraMonto] = useState(0);
  const [compraFile, setCompraFile] = useState(null);

  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState({ type: "", text: "", file: null });

  const api = useApiClient();

  const handleAddItem = () => {
    setItems([...items, { productoId: 1, cantidad: 1 }]);
  };

  const handleItemChange = (index, field, value) => {
    const newItems = [...items];
    newItems[index][field] = value;
    setItems(newItems);
  };
  
  // --- Proceso 2: Venta ---
  const handleRegistrarVenta = (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage({ type: "", text: "" });

    const ventaData = {
        clienteRucDni: ventaRuc,
        items: items
    };

    api.registrarVenta(ventaData)
      .then(response => {
        setMessage({ type: "success", text: `${response.message} XML: ${response.xml}, PDF: ${response.pdf}`, file: null });
        setLoading(false);
        // Limpiar formulario
        setVentaRuc("");
        setItems([{ productoId: 1, cantidad: 1 }]);
      })
      .catch(err => {
        setMessage({ type: "error", text: `Error Validación: ${err.message}`, file: err.file });
        setLoading(false);
      });
  };

  // --- Proceso 2: Compra ---
  const handleRegistrarCompra = (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage({ type: "", text: "" });

    const formData = new FormData();
    formData.append("proveedorRuc", compraRuc);
    formData.append("numeroFactura", compraFactura);
    formData.append("montoTotal", compraMonto);
    if (compraFile) {
      formData.append("file", compraFile);
    }

    api.registrarCompra(formData)
      .then(response => {
        setMessage({ type: "success", text: response.message, file: null });
        setLoading(false);
        // Limpiar formulario
        setCompraRuc("");
        setCompraFactura("");
        setCompraMonto(0);
        setCompraFile(null);
      })
      .catch(err => {
        setMessage({ type: "error", text: `Error Validación: ${err.message}`, file: err.file });
        setLoading(false);
      });
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-indigo-700 mb-6">
        Operación Diaria – Ventas y Compras
      </h1>

      {message.text && (
        <div className={`p-4 mb-4 rounded ${message.type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
          <p>{message.text}</p>
          {message.file && <p>Archivo de error generado: {message.file}</p>}
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Registro de ventas */}
        <form onSubmit={handleRegistrarVenta} className="bg-white shadow rounded-lg p-6">
          <h2 className="font-semibold text-lg mb-4">Emisión de CPE (Venta)</h2>
          <input
            className="border p-2 rounded w-full mb-2"
            placeholder="Cliente (RUC/DNI)"
            value={ventaRuc}
            onChange={(e) => setVentaRuc(e.target.value)}
            required
          />
          <h3 className="font-medium mt-2">Ítems:</h3>
          {items.map((item, index) => (
            <div key={index} className="flex gap-2 mb-2">
                <input 
                    type="number"
                    className="border p-2 rounded w-1/2"
                    placeholder="ID Producto"
                    value={item.productoId}
                    onChange={(e) => handleItemChange(index, 'productoId', e.target.value)}
                />
                <input
                    type="number"
                    className="border p-2 rounded w-1/2"
                    placeholder="Cantidad"
                    value={item.cantidad}
                    onChange={(e) => handleItemChange(index, 'cantidad', e.target.value)}
                />
            </div>
          ))}
          <button type="button" onClick={handleAddItem} className="text-sm text-indigo-600 mb-4">+ Agregar ítem</button>
          
          <button type="submit" disabled={loading} className="w-full px-4 py-2 bg-indigo-600 text-white rounded disabled:bg-gray-400">
            {loading ? "Registrando..." : "Generar CPE"}
          </button>
        </form>

        {/* Registro de compras */}
        <form onSubmit={handleRegistrarCompra} className="bg-white shadow rounded-lg p-6">
          <h2 className="font-semibold text-lg mb-4">Registro de Compras</h2>
          <input
            className="border p-2 rounded w-full mb-2"
            placeholder="Proveedor (RUC)"
            value={compraRuc}
            onChange={(e) => setCompraRuc(e.target.value)}
            required
          />
          <input
            className="border p-2 rounded w-full mb-2"
            placeholder="Número Factura"
            value={compraFactura}
            onChange={(e) => setCompraFactura(e.target.value)}
            required
          />
          <input
            type="number"
            step="0.01"
            className="border p-2 rounded w-full mb-2"
            placeholder="Monto Total (inc. IGV)"
            value={compraMonto}
            onChange={(e) => setCompraMonto(e.target.value)}
            required
          />
          <label className="block text-sm text-gray-600 mb-2">Adjuntar XML/PDF (Opcional):</label>
          <input
            type="file"
            className="border p-2 rounded w-full mb-4"
            onChange={(e) => setCompraFile(e.target.files[0])}
          />
          <button type="submit" disabled={loading} className="w-full px-4 py-2 bg-green-600 text-white rounded disabled:bg-gray-400">
            {loading ? "Registrando..." : "Registrar Compra"}
          </button>
        </form>
      </div>
    </div>
  );
}
'''

### features/tax/pages/MonthlyClosingPage.jsx
'''
import React, { useState } from "react";
import { useApiClient } from "../../../api/tax";
import { useAuth } from "../../../hooks/useAuth"; // Importa useAuth para obtener el token

export default function MonthlyClosingPage() {
  const [periodo, setPeriodo] = useState(new Date().toISOString().slice(0, 7).replace("-","")); // "YYYYMM"
  const [declaracion, setDeclaracion] = useState(null);
  const [loading, setLoading] = useState(false);
  const [downloading, setDownloading] = useState(null); // Para indicar qué archivo se está descargando
  const [message, setMessage] = useState({ type: "", text: "" });

  const api = useApiClient();
  const { token } = useAuth(); // Obtén el token actual

  const handleIniciarCierre = () => {
    setLoading(true);
    setMessage({ type: "", text: "" });
    setDeclaracion(null);

    api.iniciarCierre(periodo)
      .then(data => {
        setDeclaracion(data);
        setMessage({ type: "success", text: `Cálculo para ${periodo} completado. Listo para revisión.` });
        setLoading(false);
      })
      .catch(err => {
        setMessage({ type: "error", text: `Error: ${err.message}` });
        setLoading(false);
      });
  };

  const handleAprobar = (aprobado) => {
    if (!declaracion) return;

    setLoading(true);
    setMessage({ type: "", text: "" });

    api.aprobarDeclaracion(declaracion.id, aprobado)
      .then(data => {
        // Actualiza solo los campos necesarios, evita sobreescribir todo si la respuesta es un DTO
         setDeclaracion(prev => ({ ...prev, estado: data.estado }));
        const msg = aprobado ? "Declaración APROBADA." : "Declaración RECHAZADA para ajustes.";
        setMessage({ type: "success", text: msg });
        setLoading(false);
      })
      .catch(err => {
        setMessage({ type: "error", text: `Error: ${err.message}` });
        setLoading(false);
      });
  };

  // --- Nueva Función para Descarga Autenticada ---
  const handleDownload = async (tipoArchivo, nombreArchivoSugerido) => {
    if (!declaracion) return;
    setDownloading(tipoArchivo); // Indica que este archivo se está descargando
    setMessage({ type: "", text: "" });

    const url = `http://localhost:8081/api/tax/closing/descargar/${declaracion.id}/${tipoArchivo}`;

    try {
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`, // <-- ¡Añadir el token!
        },
      });

      if (response.status === 403) {
           setMessage({ type: "error", text: "Error 403: No tienes permiso para descargar este archivo." });
           setDownloading(null);
           return;
      }
      if (!response.ok) {
        throw new Error(`Error al descargar: ${response.statusText}`);
      }

      const blob = await response.blob(); // Obtiene el contenido del archivo como Blob

      // Intenta obtener el nombre del archivo de la cabecera Content-Disposition si existe
      const disposition = response.headers.get('content-disposition');
      let filename = nombreArchivoSugerido; // Usa el nombre sugerido por defecto
      if (disposition && disposition.indexOf('attachment') !== -1) {
          const filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
          const matches = filenameRegex.exec(disposition);
          if (matches != null && matches[1]) {
            filename = matches[1].replace(/['"]/g, '');
          }
      }

      // Crea un enlace temporal para descargar el Blob
      const link = document.createElement('a');
      link.href = window.URL.createObjectURL(blob);
      link.setAttribute('download', filename); // Establece el nombre de archivo
      document.body.appendChild(link);
      link.click(); // Simula el clic para iniciar la descarga
      link.parentNode.removeChild(link); // Limpia el enlace
      window.URL.revokeObjectURL(link.href); // Libera la URL del objeto

    } catch (error) {
      setMessage({ type: "error", text: `Error al descargar ${tipoArchivo}: ${error.message}` });
    } finally {
      setDownloading(null); // Finaliza la indicación de descarga
    }
  };
  // --------------------------------------------------

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-indigo-700 mb-6">
        Cierre Mensual – Declaraciones Tributarias
      </h1>

      {message.text && (
        <div className={`p-4 mb-4 rounded ${message.type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
          {message.text}
        </div>
      )}

      {/* --- Paso 1: Iniciar Cierre --- */}
      <div className="bg-white shadow rounded-lg p-6 mb-6">
        <h2 className="font-semibold text-lg mb-4">
          Consolidación y Cálculo de IGV
        </h2>
        <div className="flex gap-4 items-center">
          <input
            type="text"
            className="border p-2 rounded"
            placeholder="Periodo (YYYYMM)"
            value={periodo}
            onChange={(e) => setPeriodo(e.target.value)}
            disabled={loading || downloading} // Deshabilitar durante carga/descarga
          />
          <button
            className="px-4 py-2 bg-indigo-600 text-white rounded disabled:bg-gray-400"
            onClick={handleIniciarCierre}
            disabled={loading || downloading} // Deshabilitar durante carga/descarga
          >
            {loading ? "Calculando..." : "Ejecutar Cálculo"}
          </button>
        </div>
      </div>

      {/* --- Paso 2 y 3: Revisión y Descarga --- */}
      {declaracion && (
        <div className="animate-fadeIn">
          {/* Resumen */}
          <div className="bg-white shadow rounded-lg p-6 mb-6">
            <h2 className="font-semibold text-lg mb-2">Resumen del Cálculo (ID: {declaracion.id})</h2>
            <p className="mb-4">Estado: <strong className={`font-medium ${
                declaracion.estado === 'APROBADO_LISTO_PRESENTAR' ? 'text-green-600' :
                declaracion.estado === 'RECHAZADO_AJUSTES' ? 'text-red-600' : 'text-yellow-600'
            }`}>{declaracion.estado}</strong></p>
            <div className="grid grid-cols-2 gap-4">
                <p>IGV Débito: <span className="font-mono">S/ {declaracion.igvDebito?.toFixed(2) ?? 'N/A'}</span></p>
                <p>IGV Crédito: <span className="font-mono">S/ {declaracion.igvCredito?.toFixed(2) ?? 'N/A'}</span></p>
                <p className="font-bold">IGV Neto: <span className="font-mono">S/ {declaracion.igvNeto?.toFixed(2) ?? 'N/A'}</span></p>
                <p className="font-bold">Renta: <span className="font-mono">S/ {declaracion.rentaPagoCuenta?.toFixed(2) ?? 'N/A'}</span></p>
            </div>
          </div>

          {/* Formularios y Reportes - Ahora usan botones y handleDownload */}
          <div className="bg-white shadow rounded-lg p-6 mb-6">
            <h2 className="font-semibold text-lg mb-4">
              Formularios y Reportes Exportables
            </h2>
            <div className="space-y-2">
              <button
                onClick={() => handleDownload('borrador', `BorradorCalculo_${declaracion.periodo}.xlsx`)}
                disabled={downloading}
                className="text-indigo-600 hover:underline disabled:text-gray-400 disabled:cursor-wait"
              >
                {downloading === 'borrador' ? 'Descargando...' : `BorradorCalculo_${declaracion.periodo}.xlsx`}
              </button>
              <br/>
              <button
                 onClick={() => handleDownload('form621', declaracion.form621Pdf || `Form621_${declaracion.periodo}.pdf`)}
                 disabled={downloading}
                 className="text-indigo-600 hover:underline disabled:text-gray-400 disabled:cursor-wait"
              >
                 {downloading === 'form621' ? 'Descargando...' : `${declaracion.form621Pdf || 'Form621.pdf'} (Form 621)`}
              </button>
              <br/>
               <button
                 onClick={() => handleDownload('resumen', declaracion.resumenIgvPdf || `ResumenIGV_${declaracion.periodo}.pdf`)}
                 disabled={downloading}
                 className="text-indigo-600 hover:underline disabled:text-gray-400 disabled:cursor-wait"
               >
                 {downloading === 'resumen' ? 'Descargando...' : `${declaracion.resumenIgvPdf || 'ResumenIGV.pdf'} (Resumen IGV)`}
               </button>
            </div>
          </div>

          {/* Aprobación */}
          <div className="bg-white shadow rounded-lg p-6">
            <h2 className="font-semibold text-lg mb-4">
              Revisión y Aprobación Final
            </h2>

            {declaracion.estado === 'PENDIENTE_APROBACION' ? (
              <div className="flex gap-4">
                <button
                  className="px-4 py-2 bg-green-600 text-white rounded disabled:bg-gray-400"
                  onClick={() => handleAprobar(true)}
                  disabled={loading || downloading}
                >
                  {loading ? 'Procesando...' : 'Aprobar'}
                </button>
                <button
                  className="px-4 py-2 bg-red-600 text-white rounded disabled:bg-gray-400"
                  onClick={() => handleAprobar(false)}
                  disabled={loading || downloading}
                >
                  {loading ? 'Procesando...' : 'Solicitar Ajustes'}
                </button>
              </div>
            ) : declaracion.estado === 'APROBADO_LISTO_PRESENTAR' ? (
                 <button
                    onClick={() => handleDownload('paquete', declaracion.paqueteZip || `PaqueteDeclaracion_${declaracion.periodo}.zip`)}
                    disabled={downloading}
                    className="px-6 py-3 bg-blue-600 text-white rounded font-medium inline-block hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-wait"
                 >
                    {downloading === 'paquete' ? 'Descargando...' : 'Descargar PaqueteDeclaracion.zip'}
                 </button>
            ) : (
                <p className="text-red-600 font-medium">Declaración Rechazada. Requiere ajustes.</p>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
'''

### features/tax/pages/TaxConfigPage.jsx
'''
import React, { useState, useEffect } from "react";
import { useApiClient } from "../../../api/tax";

export default function TaxConfigPage() {
  const [step, setStep] = useState(1); // 1: Perfil, 2: Parámetros, 3: Catálogo
  const [loading, setLoading] = useState(true);
  
  // Formularios
  const [perfil, setPerfil] = useState({
    ruc: "",
    razonSocial: "",
    regimen: "Régimen General", // Valor por defecto
    domicilio: "",
    representanteLegal: "",
    cuentaBancaria: "",
  });
  
  const [params, setParams] = useState({
    tasaIgv: 18.0,
    reglasRedondeo: "COMERCIAL",
    formatoExportacion: "PDT_SUNAT",
  });
  
  const [catalogoFile, setCatalogoFile] = useState(null);
  const [configStatus, setConfigStatus] = useState({
    contribuyente: null,
    parametros: null,
    cantidadProductos: 0
  });

  const [message, setMessage] = useState({ type: "", text: "" });

  const api = useApiClient();

  // Cargar estado inicial
  useEffect(() => {
    api.getConfiguracion()
      .then(data => {
        setConfigStatus(data);
        if (data.contribuyente) {
          setPerfil(data.contribuyente);
        }
        if (data.parametros) {
          setParams(data.parametros);
        }
        setLoading(false);
      })
      .catch(err => {
        setMessage({ type: "error", text: `Error al cargar: ${err.message}` });
        setLoading(false);
      });
  }, []);

  const handlePerfilChange = (e) => {
    setPerfil({ ...perfil, [e.target.name]: e.target.value });
  };

  const handleParamsChange = (e) => {
    setParams({ ...params, [e.target.name]: e.target.value });
  };
  
  const handleFileChange = (e) => {
    setCatalogoFile(e.target.files[0]);
  };

  const handleSavePerfil = (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage({ type: "", text: "" });
    api.guardarContribuyente(perfil)
      .then(data => {
        setConfigStatus(data);
        setMessage({ type: "success", text: "Perfil guardado exitosamente." });
        setStep(2);
        setLoading(false);
      })
      .catch(err => {
        setMessage({ type: "error", text: err.message });
        setLoading(false);
      });
  };
  
  const handleSaveParams = (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage({ type: "", text: "" });
    api.guardarParametros(params)
      .then(data => {
        setConfigStatus(data);
        setMessage({ type: "success", text: "Parámetros guardados y versionados." });
        setStep(3);
        setLoading(false);
      })
      .catch(err => {
        setMessage({ type: "error", text: err.message });
        setLoading(false);
      });
  };

  const handleUploadCatalogo = (e) => {
    e.preventDefault();
    if (!catalogoFile) {
        setMessage({ type: "error", text: "Debe seleccionar un archivo CSV." });
        return;
    }
    
    setLoading(true);
    setMessage({ type: "", text: "" });
    
    const formData = new FormData();
    formData.append("file", catalogoFile);

    api.subirCatalogo(formData)
      .then(response => {
        setMessage({ type: "success", text: response.message });
        // Recargar status
        api.getConfiguracion().then(setConfigStatus);
        setLoading(false);
      })
      .catch(err => {
        setMessage({ type: "error", text: `Error de Validación: ${err.message}` });
        setLoading(false);
      });
  };
  
  if (loading && !configStatus.contribuyente) return <p>Cargando configuración...</p>;

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-indigo-700 mb-6">
        Configuración Tributaria – Perfil del Contribuyente
      </h1>

      {message.text && (
        <div className={`p-4 mb-4 rounded ${message.type === 'success' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
          {message.text}
        </div>
      )}

      {/* Navegación por Pasos */}
      <div className="mb-4 border-b">
        <button onClick={() => setStep(1)} className={`py-2 px-4 ${step === 1 ? 'border-b-2 border-indigo-500 font-medium' : 'text-gray-500'}`}>
          Paso 1: Perfil Contribuyente
        </button>
        <button onClick={() => setStep(2)} disabled={!configStatus.contribuyente} className={`py-2 px-4 ${step === 2 ? 'border-b-2 border-indigo-500 font-medium' : 'text-gray-500'} disabled:opacity-50`}>
          Paso 2: Parámetros
        </button>
        <button onClick={() => setStep(3)} disabled={!configStatus.parametros} className={`py-2 px-4 ${step === 3 ? 'border-b-2 border-indigo-500 font-medium' : 'text-gray-500'} disabled:opacity-50`}>
          Paso 3: Catálogo
        </button>
      </div>

      {step === 1 && (
        <form onSubmit={handleSavePerfil} className="bg-white shadow rounded-lg p-6">
          <h2 className="font-semibold text-lg mb-4">Alta de Contribuyente</h2>
          <div className="grid grid-cols-2 gap-4">
            <input name="ruc" value={perfil.ruc} onChange={handlePerfilChange} className="border p-2 rounded" placeholder="RUC (11 dígitos)" required />
            <input name="razonSocial" value={perfil.razonSocial} onChange={handlePerfilChange} className="border p-2 rounded" placeholder="Razón Social" required />
            <select name="regimen" value={perfil.regimen} onChange={handlePerfilChange} className="border p-2 rounded">
                <option value="Régimen General">Régimen General</option>
                <option value="Régimen MYPE">Régimen MYPE Tributario</option>
                <option value="Régimen Especial">Régimen Especial de Renta</option>
            </select>
            <input name="domicilio" value={perfil.domicilio} onChange={handlePerfilChange} className="border p-2 rounded" placeholder="Domicilio Fiscal" />
            <input name="cuentaBancaria" value={perfil.cuentaBancaria} onChange={handlePerfilChange} className="border p-2 rounded" placeholder="Cuenta Bancaria" />
            <input name="representanteLegal" value={perfil.representanteLegal} onChange={handlePerfilChange} className="border p-2 rounded" placeholder="Representante Legal" />
          </div>
          <button type="submit" disabled={loading} className="mt-4 px-4 py-2 bg-indigo-600 text-white rounded disabled:bg-gray-400">
            {loading ? "Guardando..." : "Guardar y continuar (Paso 2)"}
          </button>
        </form>
      )}

      {step === 2 && (
        <form onSubmit={handleSaveParams} className="bg-white shadow rounded-lg p-6">
          <h2 className="font-semibold text-lg mb-4">Parámetros Tributarios Mínimos</h2>
          <p className="text-sm text-gray-600 mb-4">Al guardar, se creará una nueva versión de los parámetros.</p>
          <div className="grid grid-cols-2 gap-4">
            <input type="number" step="0.01" name="tasaIgv" value={params.tasaIgv} onChange={handleParamsChange} className="border p-2 rounded" placeholder="Porcentaje IGV (ej: 18.0)" />
            <input name="reglasRedondeo" value={params.reglasRedondeo} onChange={handleParamsChange} className="border p-2 rounded" placeholder="Reglas de Redondeo" />
            <input name="formatoExportacion" value={params.formatoExportacion} onChange={handleParamsChange} className="border p-2 rounded" placeholder="Formato Exportación" />
          </div>
          <button type="submit" disabled={loading} className="mt-4 px-4 py-2 bg-indigo-600 text-white rounded disabled:bg-gray-400">
            {loading ? "Guardando..." : "Confirmar y continuar (Paso 3)"}
          </button>
        </form>
      )}

      {step === 3 && (
        <form onSubmit={handleUploadCatalogo} className="bg-white shadow rounded-lg p-6">
          <h2 className="font-semibold text-lg mb-4">Carga de Catálogo de Productos/Servicios</h2>
          <p className="text-sm text-gray-600 mb-4">Productos actuales en BD: <strong>{configStatus.cantidadProductos}</strong></p>
          <input type="file" name="file" onChange={handleFileChange} className="mb-4" accept=".csv" />
          <p className="text-sm text-gray-600 mb-4">
            Sube un archivo <code>CatalogoCarga.csv</code> (Campos: codigo, descripcion, precio_unitario, afectacion_igv).
          </p>
          <button type="submit" disabled={loading} className="px-4 py-2 bg-green-600 text-white rounded disabled:bg-gray-400">
            {loading ? "Validando y Guardando..." : "Validar y Activar Perfil"}
          </button>
        </form>
      )}
    </div>
  );
}
'''

### hooks/useAuth.js
'''
import { useContext } from 'react';
import { AuthContext } from '../contexts/AuthContext';

// Hook personalizado que exporta todas las funciones del contexto
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

// Hook específico para operaciones de autenticación
export const useAuthOperations = () => {
  const { login, logout, validateToken } = useAuth();
  
  return {
    login,
    logout,
    validateToken
  };
};

// Hook específico para información del usuario
export const useUserInfo = () => {
  const { user, isAuthenticated, loading, userName, userEmail, userRole } = useAuth();
  
  return {
    user,
    isAuthenticated,
    loading,
    userName,
    userEmail,
    userRole
  };
};

// Hook básico para permisos (versión simple)
export const useBasicPermissions = () => {
  const { hasPermission, hasAnyPermission, hasRole, hasAnyRole, permissions, userRole } = useAuth();
  
  return {
    hasPermission,
    hasAnyPermission,
    hasRole,
    hasAnyRole,
    permissions,
    userRole
  };
};

export default useAuth;
'''

### hooks/usePermissions.js
'''
import { useAuth } from './useAuth';

// Hook específico para validación de permisos
export const usePermissions = () => {
  const { hasPermission, hasAnyPermission, hasRole, hasAnyRole, permissions, userRole } = useAuth();
  
  // Funciones adicionales para casos específicos del negocio
  const canAccessTaxModule = () => {
    return hasRole('ADMIN_TRIBUTARIO');
  };
  
  const canAccessPayrollModule = () => {
    return hasRole('GESTOR_PLANILLA');
  };
  
  const canAccessHiringModule = () => {
    return hasRole('GESTOR_CONTRATACION');
  };
  
  const canManageReports = () => {
    return hasAnyPermission(['view_tax_reports', 'generate_payroll_reports', 'view_hiring_reports']);
  };
  
  const canAccessDashboard = () => {
    return hasPermission('view_dashboard');
  };
  
  const canManageEmployees = () => {
    return hasAnyPermission(['manage_employees', 'manage_payroll_novelties']);
  };
  
  return {
    hasPermission,
    hasAnyPermission,
    hasRole,
    hasAnyRole,
    permissions,
    userRole,
    // Funciones específicas del dominio
    canAccessTaxModule,
    canAccessPayrollModule,
    canAccessHiringModule,
    canManageReports,
    canAccessDashboard,
    canManageEmployees
  };
};
'''

### layouts/AuthenticatedDashboardLayout.jsx
'''
import React from 'react';
import { useAuth } from '../hooks/useAuth';
import { Navigate, Outlet } from 'react-router-dom';
import Sidebar from '../components/ui/SideBar';
import TopNavbar from '../components/ui/TopNavbar';
import '../components/ui/Sidebar.css';
import '../components/ui/TopNavbar.css';
import './DashboardLayout.css';

/**
 * Layout principal del dashboard con autenticación
 */
const AuthenticatedDashboardLayout = () => {
  const { isAuthenticated, loading, user } = useAuth();

  // Mostrar loading mientras se valida la autenticación
  if (loading) {
    return (
      <div className="dashboard-loading">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>Cargando dashboard...</p>
        </div>
      </div>
    );
  }

  // Si no está autenticado, redirigir al login
  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  return (
    <div className="dashboard-layout">
      {/* Sidebar con navegación por rol */}
      <Sidebar />
      
      {/* Contenido principal */}
      <div className="main-content">
        {/* Navbar superior */}
        <TopNavbar />
        
        {/* Área de contenido */}
        <main className="content-area">
          <div className="content-wrapper">
            <Outlet />
          </div>
        </main>
      </div>
    </div>
  );
};

export default AuthenticatedDashboardLayout;
'''

### layouts/DashboardLayout.jsx
'''
import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { Navigate } from 'react-router-dom';
import Sidebar from '../components/ui/SideBar';
import TopNavbar from '../components/ui/TopNavbar';
import ProtectedRoute from '../components/auth/ProtectedRoute';
import '../components/ui/Sidebar.css';
import '../components/ui/TopNavbar.css';

// --- Constants (Combined from other components to ensure single-file integrity) ---
const ROLES = {
  ADMIN: 'Administrador',
  EMPLOYEE: 'Empleado',
};

const MOCK_USER_INFO = {
  name: 'Alex Johnson',
  initials: 'AJ', // Used for the profile button initial
};
// ---------------------------------------------------------------------------------

/**
 * Componente funcional para el SideBar (Menu lateral).
 * Solo visible y fully functional when the user role is 'Administrador'.
 */
const SideBar = ({ role, currentPage, setPage }) => {
  const adminNav = [
    { name: 'Dashboard', icon: LayoutDashboard, page: 'dashboard' },
    { name: 'Maestros y Config', icon: Settings, page: 'masters' },
    { name: 'Liquidación', icon: Calculator, page: 'liquidation' },
    { name: 'Reportes y Salidas', icon: BarChart3, page: 'reports' },
  ];

  // If the current role is not Administrator, display a restricted view.
  if (role !== ROLES.ADMIN) {
    return (
      <div className="w-0 bg-gray-800 text-white flex flex-col h-full fixed shadow-xl overflow-hidden">
        {/* Empty placeholder for non-admin roles */}
      </div>
    );
  }

  // Display the full admin sidebar for the Administrator role.
  return (
    <div className="w-64 bg-gray-800 text-white flex flex-col h-full fixed shadow-xl">
      <div className="p-6 text-2xl font-bold text-indigo-400 border-b border-gray-700">SISAC 💸</div>
      <nav className="flex-1 p-4 space-y-2">
        {adminNav.map((item) => (
          <button
            key={item.page}
            onClick={() => setPage(item.page)}
            className={`w-full flex items-center px-4 py-3 rounded-lg transition duration-200 font-medium ${
              currentPage === item.page ? 'bg-indigo-600 text-white shadow-lg' : 'hover:bg-gray-700 text-gray-300'
            }`}
          >
            <item.icon className="w-5 h-5 mr-3" />
            {item.name}
          </button>
        ))}
      </nav>
      <div className="p-4 text-sm text-gray-400 border-t border-gray-700">
        Rol: <span className="capitalize font-medium text-indigo-300">{role}</span>
      </div>
    </div>
  );
};

/**
 * Componente funcional para el User Menu desplegable.
 */
const UserMenu = ({ role, setRole, setPage, isMenuOpen, setIsMenuOpen }) => {
  // We use setPage to handle navigation, which implicitly handles "special pages" for this mockup
  const navigateToSpecialPage = (pageName) => {
    console.log(`Navigating to special page: ${pageName}`);
    // In a real app, you would use setPage or a router for this
    setIsMenuOpen(false);
  };

  return (
    <div className="relative">
      {/* Botón de Perfil */}
      <button 
        onClick={() => setIsMenuOpen(!isMenuOpen)}
        className="w-10 h-10 bg-indigo-500 rounded-full flex items-center justify-center text-white font-medium hover:ring-2 hover:ring-indigo-300 transition shadow-md"
      >
        {MOCK_USER_INFO.initials}
      </button>

      {/* Menú Dropdown */}
      {isMenuOpen && (
        <div className="absolute right-0 mt-2 w-64 bg-white rounded-xl shadow-2xl border border-gray-100 z-50 transform origin-top-right animate-scaleIn">
          <div className="p-4 border-b">
            <p className="font-bold text-gray-800">{MOCK_USER_INFO.name}</p>
            <p className="text-sm text-gray-500 capitalize">Rol: {role}</p>
          </div>
          
          <nav className="p-2 space-y-1">
            <button
              onClick={() => navigateToSpecialPage('edit-profile')}
              className="w-full flex items-center p-3 text-sm text-gray-700 rounded-lg hover:bg-gray-100 transition font-medium"
            >
              <User className="w-5 h-5 mr-3 text-indigo-500" />
              Editar Perfil
            </button>

            <button
              onClick={() => navigateToSpecialPage('self-service')}
              className="w-full flex items-center p-3 text-sm text-gray-700 rounded-lg hover:bg-gray-100 transition font-medium"
            >
              <ReceiptText className="w-5 h-5 mr-3 text-green-500" />
              Mi Nómina (Autoservicio)
            </button>

            <hr className="my-1 border-gray-100" />

            {/* Funcionalidad: Cambiar Rol */}
            <div className="pt-2">
              <span className="px-3 text-xs font-semibold uppercase text-gray-400">Cambiar Rol</span>
              <button
                onClick={() => { setRole(ROLES.ADMIN); setPage('dashboard'); setIsMenuOpen(false); }}
                className={`w-full flex items-center p-3 text-sm rounded-lg transition font-medium ${role === ROLES.ADMIN ? 'bg-indigo-50 text-indigo-700' : 'text-gray-700 hover:bg-gray-100'}`}
              >
                <Briefcase className="w-5 h-5 mr-3" />
                Administrador
              </button>
              <button
                onClick={() => { setRole(ROLES.EMPLOYEE); setPage('self-service'); setIsMenuOpen(false); }}
                className={`w-full flex items-center p-3 text-sm rounded-lg transition font-medium ${role === ROLES.EMPLOYEE ? 'bg-indigo-50 text-indigo-700' : 'text-gray-700 hover:bg-gray-100'}`}
              >
                <User className="w-5 h-5 mr-3" />
                Empleado
              </button>
            </div>

            <hr className="my-1 border-gray-100" />
            
            {/* Cerrar Sesión (Simulación) */}
            <button
              onClick={() => { console.log('Cerrando sesión...'); setIsMenuOpen(false); }}
              className="w-full flex items-center p-3 text-sm text-red-600 rounded-lg hover:bg-red-50 transition font-medium"
            >
              <LogOut className="w-5 h-5 mr-3" />
              Cerrar Sesión
            </button>
          </nav>
        </div>
      )}
    </div>
  );
};

/**
 * Componente funcional para el Navbar (Barra de navegación superior).
 */
const Navbar = ({ role, currentPage, setPage, setRole }) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  // Helper function to capitalize the first letter for display
  const formatPageName = (page) => {
    if (page === 'self-service') return 'Mi Nómina';
    return page.charAt(0).toUpperCase() + page.slice(1);
  };

  return (
    <header className="h-16 bg-white shadow-md flex items-center justify-between px-6 sticky top-0 z-40">
      <div className="flex items-center">
        {/* Título de la página actual */}
        <h1 className="text-xl font-semibold text-gray-800">
          {formatPageName(currentPage)}
        </h1>
      </div>

      <div className="flex items-center space-x-4">
        {/* Display Current Role */}
        <span className="text-sm text-gray-500 hidden sm:inline">
          Rol activo: <span className="font-bold text-indigo-600 capitalize">{role}</span>
        </span>
        
        {/* User Menu */}
        <UserMenu
          role={role}
          setRole={setRole}
          setPage={setPage}
          isMenuOpen={isMenuOpen}
          setIsMenuOpen={setIsMenuOpen}
        />
      </div>
    </header>
  );
};


/**
 * Layout principal para el Dashboard (Admin o Empleado).
 * Incluye la SideBar y la Navbar.
 */
const DashboardLayout = ({ role, currentPage, setPage, children }) => {
  // Use a local state for the role to allow the UserMenu to update it
  const [currentRole, setCurrentRole] = useState(role);

  // Function to handle role change and subsequent page redirection
  const handleRoleChange = (newRole) => {
    setCurrentRole(newRole);
    // Redirect after role change based on the new role
    setPage(newRole === ROLES.ADMIN ? 'dashboard' : 'self-service');
  };

  const isEmployee = currentRole === ROLES.EMPLOYEE;
  // If it's an employee, the content spans full width (no sidebar).
  const sidebarMarginClass = isEmployee ? 'lg:ml-0' : 'lg:ml-64';

  return (
    <div className="min-h-screen bg-gray-100 flex font-sans">
      <style>{`
        .animate-scaleIn {
          animation: scaleIn 0.15s ease-out forwards;
        }
        @keyframes scaleIn {
          from { transform: scale(0.95); opacity: 0; }
          to { transform: scale(1); opacity: 1; }
        }
      `}</style>
      <script src="https://cdn.tailwindcss.com"></script>

      {/* SideBar: solo visible para el Admin */}
      <SideBar
        role={currentRole}
        currentPage={currentPage}
        setPage={setPage}
      />
      
      {/* Contenido principal con margen para la SideBar */}
      <div className={`flex-1 flex flex-col transition-all duration-300 w-full ${sidebarMarginClass}`}>
        <Navbar
          role={currentRole}
          currentPage={currentPage}
          setPage={setPage}
          setRole={handleRoleChange} // Pass the handler to Navbar (which passes it to UserMenu)
        />
        
        {/* Contenido de la página */}
        <main className="flex-1 p-4 sm:p-6 overflow-y-auto">
          {children}
        </main>
      </div>
    </div>
  );
};

export default DashboardLayout;

'''

### pages/NotFoundPage.jsx
'''
import React from 'react';
import { Link } from 'react-router-dom';

const NotFoundPage = () => {
  return (
    <div className="not-found-container">
      <div className="not-found-content">
        <div className="not-found-icon">
          <span>404</span>
        </div>
        <h1>Página no encontrada</h1>
        <p>Lo sentimos, la página que buscas no existe o ha sido movida.</p>
        <div className="not-found-actions">
          <Link to="/dashboard" className="btn btn-primary">
            Ir al Dashboard
          </Link>
          <button onClick={() => window.history.back()} className="btn btn-secondary">
            Volver atrás
          </button>
        </div>
      </div>
      
      <style jsx>{`
        .not-found-container {
          display: flex;
          align-items: center;
          justify-content: center;
          min-height: 100vh;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          padding: 20px;
        }
        
        .not-found-content {
          text-align: center;
          background: white;
          padding: 60px 40px;
          border-radius: 20px;
          box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
          max-width: 500px;
          width: 100%;
        }
        
        .not-found-icon {
          font-size: 6rem;
          font-weight: 700;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
          margin-bottom: 30px;
        }
        
        .not-found-content h1 {
          font-size: 2rem;
          color: #1f2937;
          margin-bottom: 16px;
        }
        
        .not-found-content p {
          color: #6b7280;
          font-size: 1.1rem;
          margin-bottom: 40px;
          line-height: 1.6;
        }
        
        .not-found-actions {
          display: flex;
          gap: 16px;
          justify-content: center;
          flex-wrap: wrap;
        }
        
        .btn {
          padding: 12px 24px;
          border-radius: 8px;
          font-weight: 500;
          text-decoration: none;
          border: none;
          cursor: pointer;
          transition: all 0.2s ease;
          display: inline-flex;
          align-items: center;
          justify-content: center;
        }
        
        .btn-primary {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
        }
        
        .btn-primary:hover {
          transform: translateY(-2px);
          box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }
        
        .btn-secondary {
          background: #6b7280;
          color: white;
        }
        
        .btn-secondary:hover {
          background: #4b5563;
          transform: translateY(-2px);
        }
        
        @media (max-width: 480px) {
          .not-found-content {
            padding: 40px 20px;
          }
          
          .not-found-icon {
            font-size: 4rem;
          }
          
          .not-found-content h1 {
            font-size: 1.5rem;
          }
          
          .not-found-actions {
            flex-direction: column;
          }
        }
      `}</style>
    </div>
  );
};

export default NotFoundPage;
'''

### pages/auth/LoginPage.jsx
'''
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import LoginForm from '../../components/auth/LoginForm';

const LoginPage = () => {
  const { isAuthenticated, loading } = useAuth();
  const navigate = useNavigate();

  useEffect(() => {
    // Si el usuario ya está autenticado, redirigir al dashboard
    if (isAuthenticated && !loading) {
      navigate('/dashboard', { replace: true });
    }
  }, [isAuthenticated, loading, navigate]);

  // Mostrar loading si está validando
  if (loading) {
    return (
      <div className="loading-container">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>Cargando...</p>
        </div>
      </div>
    );
  }

  // Si no está autenticado, mostrar el formulario de login
  if (!isAuthenticated) {
    return <LoginForm />;
  }

  // Mientras redirige, mostrar un mensaje
  return (
    <div className="loading-container">
      <div className="loading-spinner">
        <div className="spinner"></div>
        <p>Redirigiendo...</p>
      </div>
    </div>
  );
};

export default LoginPage;
'''

### routes/AppRoutes.jsx
'''
// src/AppRoutes.jsx
import React, { useState } from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import LoginPage from '@pages_e/LoginPage.jsx';
import SignupPage from '@pages_e/SignupPage.jsx';
import DashboardPage from '@pages_e/DashboardPage.jsx';
import EditProfilePage from '@pages_e/EditProfilePage.jsx';
import PayrollSelfServicePage from '@pages_e/PayrollSelfServicePage.jsx';
import EmployeePayrollDetails from '@masters/EmployeePayrollDetails.jsx';
import LegalParametersTable from '@masters/LegalParametersTable.jsx';
import MonthlyNoveltyEntry from '@processes/MonthlyNoveltyEntry.jsx'; 
import PrePayrollReviewTable from '@processes/PrePayrollReviewTable.jsx';
import PayrollSummaryReportPage from '@reports/PayrollSummaryReportPage.jsx'; // Nuevo
import OutputFilesPage from '@reports/OutputFilesPage.jsx'; // Nuevo
import TaxConfigPage from '@tax/pages/TaxConfigPage.jsx';
import DailyOpsPage from '@tax/pages/DailyOpsPage.jsx';
import MonthlyClosingPage from '@tax/pages/MonthlyClosingPage.jsx';
import ConvocatoriasDashboardPage from '../features/convocatorias/pages/ConvocatoriasDashboardPage.jsx';
import DashboardLayout from '../layouts/DashboardLayout.jsx';
import TestConvocatorias from '../TestConvocatorias.jsx';



const PrivateRoute = ({ children, isAuthenticated }) => {
    return isAuthenticated ? children : <Navigate to="/login" />;
};

export default function AppRoutes() {
    const { user, isAuthenticated, logout } = useAuth();
    
    // Para compatibilidad con el código existente
    const isLoggedIn = isAuthenticated;
    const handleLogout = logout;

    return (
        <BrowserRouter>
            <Routes>
                <Route path="/login" element={<LoginPage onLogin={handleLogin} />} />
                <Route path="/signup" element={<SignupPage />} />
                
                <Route 
                    path="/dashboard" 
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <DashboardPage user={user} onLogout={handleLogout} />
                        </PrivateRoute>
                    }
                />
                
                <Route 
                    path="/dashboard/edit-profile" 
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <EditProfilePage user={user} setUser={setUser} />
                        </PrivateRoute>
                    }
                />

                <Route 
                    path="/dashboard/payroll-selfservice" 
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <PayrollSelfServicePage user={user} onLogout={handleLogout} />
                        </PrivateRoute>
                    }
                />
                
                <Route 
                    path="/masters/legal-parameters" 
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <LegalParametersTable user={user} onLogout={handleLogout} />
                        </PrivateRoute>
                    }
                />
                
                <Route 
                    path="/masters/employee-payroll" 
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <EmployeePayrollDetails user={user} onLogout={handleLogout} />
                        </PrivateRoute>
                    }
                />

                <Route
                    path="/payroll/novelties"
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <MonthlyNoveltyEntry user={user} onLogout={handleLogout} />
                        </PrivateRoute>
                    }
                />

                <Route
                    path="/payroll/review"
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <PrePayrollReviewTable user={user} onLogout={handleLogout} />
                        </PrivateRoute>
                    }
                />
                
                {/* Nuevas rutas para los reportes */}
                <Route
                    path="/reports/summary"
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <PayrollSummaryReportPage user={user} onLogout={handleLogout} />
                        </PrivateRoute>
                    }
                />
                
                <Route
                    path="/reports/output-files"
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <OutputFilesPage user={user} onLogout={handleLogout} />
                        </PrivateRoute>
                    }
                />

                {/* Sección Tributaria */}
                <Route
                    path="/tax/config"
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <TaxConfigPage user={user} onLogout={handleLogout} />
                        </PrivateRoute>
                    }
                />
                <Route
                    path="/tax/daily"
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <DailyOpsPage user={user} onLogout={handleLogout} />
                        </PrivateRoute>
                    }
                />
                <Route
                    path="/tax/closing"
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <MonthlyClosingPage user={user} onLogout={handleLogout} />
                        </PrivateRoute>
                    }
                />

                {/* Sección Gestión de Convocatorias */}
                <Route
                    path="/convocatorias"
                    element={
                        <PrivateRoute isAuthenticated={isLoggedIn}>
                            <TestConvocatorias />
                        </PrivateRoute>
                    }
                />

                <Route path="*" element={<Navigate to="/login" />} />
            </Routes>
        </BrowserRouter>
    );
}
'''

### routes/AuthenticatedAppRoutes.jsx
'''
import React from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider } from '../contexts/AuthContext';
import ProtectedRoute from '../components/auth/ProtectedRoute';
import AuthenticatedDashboardLayout from '../layouts/AuthenticatedDashboardLayout';

// Páginas de autenticación
import LoginPage from '../pages/auth/LoginPage';

// Páginas principales
import DashboardPage from '../features/employees/pages/DashboardPage';
import EditProfilePage from '../features/employees/pages/EditProfilePage';
import PayrollSelfServicePage from '../features/employees/pages/PayrollSelfServicePage';
import NotFoundPage from '../pages/NotFoundPage';

// Módulo Tributario (ADMIN_TRIBUTARIO)
import TaxConfigPage from '../features/tax/pages/TaxConfigPage';
import DailyOpsPage from '../features/tax/pages/DailyOpsPage';
import MonthlyClosingPage from '../features/tax/pages/MonthlyClosingPage';

// Módulo Planilla (GESTOR_PLANILLA)
import LiquidationProcessPage from '../features/payroll/pages/LiquidationProcessPage';
import MastersConfigPage from '../features/payroll/pages/MastersConfigPage';
import PayrollDashboardPage from '../features/payroll/pages/PayrollDashboardPage';
import ReportsPage from '../features/payroll/pages/ReportsPage';

// Módulo Convocatorias (GESTOR_CONTRATACION)
import TestConvocatorias from '../TestConvocatorias';
import ConvocatoriasDashboardPage from '../features/convocatorias/pages/ConvocatoriasDashboardPage';

// Componentes específicos de planilla - Temporalmente comentados para arreglar imports
// import EmployeePayrollDetails from '../features/payroll/components/masters/EmployeePayrollDetails';
// import LegalParametersTable from '../features/payroll/components/masters/LegalParametersTable';
// import MonthlyNoveltyEntry from '../features/payroll/components/processes/MonthlyNoveltyEntry';
// import PrePayrollReviewTable from '../features/payroll/components/processes/PrePayrollReviewTable';
// import PayrollSummaryReportPage from '../features/payroll/components/reports/PayrollSummaryReportPage';
// import OutputFilesPage from '../features/payroll/components/reports/OutputFilesPage';

// Rutas del módulo tributario
const TaxRoutes = () => (
  <Routes>
    <Route path="/config" element={<TaxConfigPage />} />
    <Route path="/daily" element={<DailyOpsPage />} />
    <Route path="/closing" element={<MonthlyClosingPage />} />
  </Routes>
);

// Rutas del módulo de planilla
const PayrollRoutes = () => (
  <Routes>
    <Route path="/novelties" element={<MonthlyNoveltyEntry />} />
    <Route path="/review" element={<PrePayrollReviewTable />} />
    <Route path="/liquidation" element={<LiquidationProcessPage />} />
    <Route path="/dashboard" element={<PayrollDashboardPage />} />
  </Routes>
);

// Rutas de maestros y configuración - Temporalmente simplificadas
const MastersRoutes = () => (
  <Routes>
    <Route path="/legal-parameters" element={<div>Parámetros Legales - En desarrollo</div>} />
    <Route path="/employee-payroll" element={<div>Detalles de Planilla - En desarrollo</div>} />
    <Route path="/config" element={<MastersConfigPage />} />
  </Routes>
);

// Rutas de reportes - Temporalmente simplificadas
const ReportsRoutes = () => (
  <Routes>
    <Route path="/summary" element={<div>Reporte Resumen - En desarrollo</div>} />
    <Route path="/output-files" element={<div>Archivos de Salida - En desarrollo</div>} />
    <Route path="/payroll" element={<ReportsPage />} />
  </Routes>
);

// Rutas de contratación (placeholder para futura implementación)
const HiringRoutes = () => (
  <Routes>
    <Route path="/convocatorias" element={<ConvocatoriasDashboardPage />} />
    <Route path="/candidates" element={<div>Gestión de Postulantes - En desarrollo</div>} />
    <Route path="/interviews" element={<div>Gestión de Entrevistas - En desarrollo</div>} />
    <Route path="/employees" element={<div>Gestión de Empleados - En desarrollo</div>} />
    <Route path="/reports" element={<div>Reportes de Contratación - En desarrollo</div>} />
  </Routes>
);

export default function AppRoutes() {
  console.log('🎯 AppRoutes rendering...');
  
  return (
    <BrowserRouter>
      <AuthProvider>
        <Routes>
          {/* Ruta pública de login */}
          <Route path="/login" element={<LoginPage />} />
          
          {/* Rutas protegidas con layout */}
          <Route path="/" element={
            <ProtectedRoute>
              <AuthenticatedDashboardLayout />
            </ProtectedRoute>
          }>
            {/* Dashboard principal */}
            <Route index element={<Navigate to="/dashboard" replace />} />
            <Route path="/dashboard" element={<DashboardPage />} />
            
            {/* Perfil de usuario */}
            <Route path="/profile" element={<EditProfilePage />} />
            
            {/* Auto-servicio de empleados */}
            <Route path="/self-service" element={<PayrollSelfServicePage />} />
            
            {/* Módulo Tributario - Solo ADMIN_TRIBUTARIO */}
            <Route path="/tax/*" element={
              <ProtectedRoute requiredRole="ADMIN_TRIBUTARIO">
                <TaxRoutes />
              </ProtectedRoute>
            } />
            
            {/* Módulo de Planilla - Solo GESTOR_PLANILLA */}
            <Route path="/payroll/*" element={
              <ProtectedRoute requiredRole="GESTOR_PLANILLA">
                <PayrollRoutes />
              </ProtectedRoute>
            } />
            
            {/* Maestros y Configuración - Solo GESTOR_PLANILLA */}
            <Route path="/masters/*" element={
              <ProtectedRoute requiredRole="GESTOR_PLANILLA">
                <MastersRoutes />
              </ProtectedRoute>
            } />
            
            {/* Reportes - Solo GESTOR_PLANILLA */}
            <Route path="/reports/*" element={
              <ProtectedRoute requiredRole="GESTOR_PLANILLA">
                <ReportsRoutes />
              </ProtectedRoute>
            } />
            
            {/* Módulo de Contratación - Solo GESTOR_CONTRATACION */}
            <Route path="/hiring/*" element={
              <ProtectedRoute requiredRole="GESTOR_CONTRATACION">
                <HiringRoutes />
              </ProtectedRoute>
            } />
          </Route>
          
          {/* Página 404 */}
          <Route path="/404" element={<NotFoundPage />} />
          
          {/* Redirecciones */}
          <Route path="*" element={<Navigate to="/404" replace />} />
        </Routes>
      </AuthProvider>
    </BrowserRouter>
  );
}
'''
